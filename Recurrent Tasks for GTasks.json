{"files":[{"id":"43a572b4-5e16-435c-b4e3-6559ae3b8fe8","name":"Code","type":"server_js","source":"// Copyright (c) 2015-2018 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Special function that handles HTTP GET requests to the published web app.\n * @return {HtmlOutput} The HTML page to be served.\n */\nfunction doGet() {\n  return HtmlService.createTemplateFromFile(\u0027index\u0027).evaluate()\n      .setTitle(\u0027Recurring Tasks\u0027)\n      .setSandboxMode(HtmlService.SandboxMode.IFRAME);\n}\n\n//TODO: remove direct saving to GTasks from TaskCal object - TaskCal should create path-update data set only and saving should occur somewhere else\n\n//*****************************************\nvar gTaskQTime \u003d 200;  // 200ms sleep \u003d max 5 Task API requests/user/second\nvar dateMin \u003d new Date(2000, 0, 1);\nvar dateMax \u003d new Date(2999, 11, 31);\n\n\nvar userTimeZone \u003d \"GMT\"; // default value - possible values http://joda-time.sourceforge.net/timezones.html\nvar appToday \u003d new Date();\nvar userToday \u003d new Date();\n\n//*****************************************\n//*****************************************\n\nfunction processRecurrentLists(testParam) {\n\n  // Check if the actions of the trigger requires authorization that has not\n  // been granted yet; if throw exception.\n  if (!isScriptAuthorized()) {\n        throw \"RecGTasks app requires additional authorization to run. Visit http://www.recgtasks.com/app to review and grant required authorization.\"\n  }\n\n  // record start of execution\n  var cache \u003d CacheService.getUserCache();\n  cache.put(\"execStarted\",Date.now(), 8000);\n\n  // read user preferecies for this user \u0026 script\n  var userProps \u003d getUserProps();\n  logLevel \u003d userProps.logVerboseLevel;\n  userTimeZone \u003d userProps.userTMZ;\n\n  // calculate TODAY for user running the script\n  userToday \u003d new Date(Utilities.formatDate(appToday, userTimeZone, \"yyyy-MM-dd\u0027T\u002700:00:00.000\u0027Z\u0027\"));\n\n  // starting date for calculation is TODAY\n  var dateStart \u003d new Date(Utilities.formatDate(userToday, userTimeZone, \"yyyy-MM-dd\u0027T\u002700:00:00.000\u0027Z\u0027\"))\n  dateStart.setHours(0,0,0,0); //set hours/minutes/seconds to zero\n  \n  // set ending date for recurrent tasks processing\n  var dateEnd \u003d new Date(Utilities.formatDate(userToday, userTimeZone, \"yyyy-MM-dd\u0027T\u002700:00:00.000\u0027Z\u0027\"));\n  dateEnd.setDate(dateStart.getDate() + parseInt(userProps.dateRangeLength)); \n  dateEnd.setHours(23,59,59,999);\n\n  //override for testing purposes\n  if (TESTMODE \u003d\u003d 1) {\n     logIt(LOG_CRITICAL, \"**** TEST MODE ENABLED ****\")\n     \n     userProps \u003d testParam.userProps;\n     dateStart \u003d testParam.dateStart;\n     dateEnd \u003d testParam.dateEnd;\n   \n  }\n  \n  // temporary code - for upgrading all triggers\n  removeAllTriggers(); \n  initTriggers (userTimeZone);\n  // end of upgrade code\n  \n  logIt(LOG_DEV, \"Executing script as \"+Session.getActiveUser().getEmail());\n  \n  logIt(LOG_DEV, \"App Today: %s\", appToday);\n  logIt(LOG_DEV, \"User Time Zone: %s\", userTimeZone);\n  logIt(LOG_DEV, \"User Today: %s\", userToday);\n  logIt(LOG_DEV, \"Date Start: %s\", dateStart);\n  logIt(LOG_DEV, \"Date End: %s\", dateEnd);\n  logIt(LOG_DEV, \"Settings: %s\", JSON.stringify(userProps));\n  \n  logIt(LOG_DEV, \"Installed triggers: \");\n  ScriptApp.getProjectTriggers().forEach(function (i) { logIt(LOG_DEV, \"  \u003e  %s, %s, %s, %s\", i.getUniqueId(), i.getEventType(), i.getHandlerFunction(), i.getTriggerSource()) });\n  \n  \n  // create Task Calendar - all recurrent tasks will be created in Task Calendar first\n  var taskCal \u003d new TaskCalendar();\n  taskCal.setLocale(userProps.weekStartsOn, userProps.dateFormat);\n  taskCal.appendPattern(userProps.appendRecPattern \u003d\u003d \u0027Y\u0027);\n  taskCal.setLogLevel(logLevel);\n\n  \n  var tasks;\n  var result;\n  var taskProps;\n  var tasklists;\n\n  taskLists \u003d safeReadTasklists();\n  if (!taskLists){\n    result \u003d \"Internal Google Error occured: \"+JSON.stringify(e);\n    logIt(LOG_CRITICAL,result );\n    return result;\n  }\n    \n  if (\"items\" in taskLists) {\n    \n    // identify default Task List which instances of recurrent tasks will be copied into\n    for (var i \u003d 0; i \u003c taskLists.items.length; i++) {\n      if (taskLists.items[i].id \u003d\u003d userProps.destTaskListId) \n        var defaultTaskList \u003d taskLists.items[i];\n    }\n    \n    if (defaultTaskList) {\n      \n      // process all Tasks lists and create instances of tasks from Recurrent task lists (those having the right prefix in task list name)\n      for (i \u003d 0; i \u003c taskLists.items.length; i++) {\n        if (taskLists.items[i].title.indexOf(userProps.recListPrefix) \u003d\u003d 0 \n            \u0026\u0026 taskLists.items[i].id !\u003d defaultTaskList.id ) {\n          logIt(LOG_INFO, \u0027\u003cb\u003eProcessing RTTL \"%s\" to list \"%s\"\u003c/b\u003e\u0027, taskLists.items[i].title, defaultTaskList.title);\n          \n          // load tasks from Google Tasks recurrent task list\n          tasks \u003d getTasks_paged(taskLists.items[i].id, {\n            showCompleted:false // RTTL templates flagged as completed will not be processed\n            //fields: \"items(id,title,notes,due)\" //to limit amount of data transported\n          });\n\n          // create instances of recurrent tasks in task calendar\n          taskCal.processRecTasks(tasks, dateStart, dateEnd)\n          \n        } else {\n          logIt(LOG_INFO, \u0027\u003cb\u003eIgnoring task list \"%s\" - it is not RTTL.\u003c/b\u003e\u0027, taskLists.items[i].title);\n        }\n\n      }        \n\n      logIt(LOG_INFO, \u0027Fetching tasks for deduplication \u0027, 0);\n      logIt(LOG_DEV, \u0027Range Start %s [%s]\u0027, dateStart, dateStart.toISOString());\n      logIt(LOG_DEV, \u0027Range End %s [%s]\u0027, dateEnd, dateEnd.toISOString());\n      \n      // load tasks from Google Tasks  Default Task list\n      taskProps \u003d {\n        dueMin:dateStart.toISOString(), \n        //dueMax:dateEnd.toISOString(),\n        showHidden:true,\n        showDeleted:userProps.ignoreDeleted \u003d\u003d \"N\",\n        fields: \"items(id,title,notes,due, deleted)\" //to limit amount of data transported\n      };\n      tasks \u003d getTasks_paged(defaultTaskList.id, taskProps);\n\n      logIt(LOG_INFO, \u0027Removing possible duplicates for %s task instances.\u0027,tasks.length);\n      // remove tasks which already exist in Google tasks from our array, so only new tasks will remain\n      taskCal.removeDuplicatesFromArray(tasks);\n      \n      logIt(LOG_INFO, \u0027Saving newly created instances of tasks.\u0027);\n      // save tasks from work calendar to Default task list - avoid duplicates\n      taskCal.saveAllTasks(defaultTaskList.id, dateStart, dateEnd)\n      \n    } else {\n      result \u003d \u0027Destination task list \u0027+userProps.destTaskListId+\u0027 not found.\u0027;\n      logIt(LOG_CRITICAL, result);\n      \n    }  \n  } else {\n    result \u003d \u0027No task lists found.\u0027;\n    logIt(LOG_CRITICAL, result);\n  }\n  \n  // if default task list does exist and sliding of overdue tasks enabled, then slide them to TODAY\n  if (defaultTaskList \u0026\u0026 userProps.slideOverdue \u003d\u003d \"Y\") {\n    slideTasks(defaultTaskList.id, userToday);\n    \n    //if sliding caused any duplication, then remove duplicates\n    removeDuplicateTasks(defaultTaskList.id, new Date());\n  }\n  \n  logIt(LOG_CRITICAL, \"*** Script execution completed ***\");\n  \n  saveLog(cache, Logger.getLog());\n  cache.put(\"execFinished\",Date.now(), 8000);\n  \n  return result;\n}\n  \n\n"},{"id":"6ed8d7d0-8724-4ec1-b0cd-86b49e8ebe4e","name":"index","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chead profile\u003d\"http://www.w3.org/2005/10/profile\"\u003e\n\u003clink rel\u003d\"icon\" \n      type\u003d\"image/png\" \n      href\u003d\"https://sites.google.com/site/recgtasks/images/icon%20150828.png\"\u003e\n\u003c/head\u003e\n\n\u003c!-- html, head \u0026 body tags added automatically - see https://developers.google.com/apps-script/guides/html/best-practices#dont_use_html_head_or_body_tags --\u003e\n\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027stylesheet\u0027).getContent(); ?\u003e\n\n\u003c!-- ********** NAVIGATION BAR --\u003e\n\n\u003cdiv class\u003d\"app\"\u003e\n\n\u003cdiv id\u003d\"navBar\" class\u003d\"navBar\"\u003e\n  \u003cdiv style\u003d\"height:77px\"\u003e\n    \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/navbar-logo.png\" alt\u003d\"Logo\"\u003e\n  \u003c/div\u003e\n  \n  \u003cdiv class\u003d\"navBarBlank\" style\u003d\"height:77px\"\u003e\n    \u003cbr/\u003e\n  \u003c/div\u003e\n  \n  \u003cdiv id\u003d\"navBarItmOverview\" class\u003d\"navBarItem\"\u003e\n    \u003cbr/\u003e\n  \u003c/div\u003e\n  \n  \u003cdiv id\u003d\"navBarItmManage\" class\u003d\"navBarItem\" \u003e\n    \u003cbr/\u003e\n  \u003c/div\u003e\n\n  \u003cdiv id\u003d\"navBarItmSettings\" class\u003d\"navBarItem\" \u003e\n    \u003cbr/\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class\u003d\"navBarBlank\"\u003e\n    \u003cbr/\u003e\n  \u003c/div\u003e\n\n\u003c/div\u003e\n\n\u003cdiv id\u003d\"sections\" class\u003d\"sections\"\u003e\n\n\u003cdiv\u003e\n  \u003ctable style\u003d\"width:100%\"\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\n        \u003ch1\u003eRecurrent Tasks\u003c/h1\u003e\n        \u003ch1 class\u003d\"subtitle\"\u003e for Google Tasks\u0026trade; (v1.9.7)\u003c/h1\u003e\n      \u003c/td\u003e\n      \u003ctd\u003e\n        \u003cp style\u003d\"text-align:right;color: darkgray;vertical-align:top\" \u003e\n          Active Google Account:\u003cbr/\u003e\n          \u003ca href\u003d\"https://accounts.google.com/SignOutOptions\" id\u003d\"usrAccnt\"\u003exxxxxx\u003c/a\u003e\n        \u003c/p\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/table\u003e\n\u003c/div\u003e\n\n\u003c!-- ********** MAIN/OVERVIEW --\u003e\n\n\u003cdiv id\u003d\"sectionMain\" class\u003d\"section\"\u003e\n  \u003cp\u003e\n    This application enables you using repeating/recurrent tasks in  \n    \u003ca href\u003d\"https://mail.google.com/tasks/canvas\" target\u003d\"_blank\"\u003eGoogle Tasks\u0026trade;\u003c/a\u003e,\n    without any special, additional service.\n  \u003c/p\u003e\n  \u003cp\u003e\n    All you need to do is:\n  \u003c/p\u003e\n  \u003col\u003e\n      \u003cli\u003eMake sure settings of this app are right for you (e.g. time-zone, \u0026amp; date format \u0026amp; first day of week). \n          You can change them anytime, but such change can create e.g. task duplicates. \u003c/li\u003e\n      \u003cli\u003eCreate new, special, task list - which will contain recurrent tasks definitions.\u003c/li\u003e\n      \u003cli\u003eCreate few recurrent tasks (in that special task list) - recurrence pattern is stored in the task notes.\u003c/li\u003e\n      \u003cli\u003eRun recurrent task processing manually (see below) or wait till tomorrow morning.\u003c/li\u003e\n  \u003c/ol\u003e\n  \u003cp\u003e    \n    Alternatively, you can \u003ca class\u003d\"linkExample\" href\u003d\"\"\u003eclick here\u003c/a\u003e to create an example \n    of a task list containing recurrent task templates. After that you can tweak them and run processing \n    of recurrent tasks manually (see bellow) and see results for yourself.\n  \u003c/p\u003e\n  \u003cdiv id\u003d\"notAuthorized\" style\u003d\"background-color:Orange;padding:10px;display:none;\"\u003e\n    \u003cp\u003e\n      Application is not authorized to work with your Google account (e.g. calendar).\n    \u003c/p\u003e\n    \u003cp\u003e\n      If you do not wish to use this app anymore, please, follow steps described in section \"Uninstall\" below.\n    \u003c/p\u003e\n  \u003c/div\u003e\n  \u003cp/\u003e\n  \u003cdiv id\u003d\"noTrigger\" style\u003d\"background-color:Orange;padding:10px;display:none;\"\u003e\n    \u003cp\u003e\n      Application IS STOPPED.\n    \u003c/p\u003e\n    \u003cp\u003e\n      Google Apps Script clock-based trigger is not activated/installed. Trigger is required in order for application to run every day at 1am and \"calculate\" repeating tasks.\n    \u003c/p\u003e\n    \u003cp\u003e\n      If you would like to use this app, please, activate/install trigger by clicking this button \u003cbutton type\u003d\"button\" id\u003d\"btnInstTrigger\"\u003eInstall Trigger\u003c/button\u003e \u003cspan id\u003d\"txtInstalled\"\u003e\u003c/span\u003e\n    \u003c/p\u003e\n  \u003c/div\u003e\n\n\n  \u003ctable\u003e\n    \u003ctr style\u003d\"vertical-align:top\"\u003e\n      \u003ctd\u003e \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/questionmark.png\" alt\u003d\"help\"\u003e \u003c/td\u003e\n      \u003ctd\u003e  \n        \u003ch2\u003eFinding help/info\u003c/h2\u003e\n        \u003cp\u003e\n          If you need additional info, please, refer to \n          \u003ca href\u003d\"https://github.com/jsdev2015/recgtasks/wiki\" target\u003d\"_blank\"\u003e project\u0027s wiki.\u003c/a\u003e.\u003cbr/\u003e\u003cbr/\u003e\n\n        \u003c/p\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr style\u003d\"vertical-align:top\"\u003e\n      \u003ctd\u003e \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/mouseclick.png\" alt\u003d\"manual run\"\u003e \u003c/td\u003e\n      \u003ctd\u003e\n        \u003ch2\u003eManual Run\u003c/h2\u003e\n        \u003cp\u003e\n          Normal tasks are generated from recurrent tasks templates automatically every day at 1am, \n          but you can start the process manually by clicking button below.\n        \u003c/p\u003e\n  \n      \u003c/td\u003e\n    \u003ctr style\u003d\"vertical-align:top\"\u003e\n      \u003ctd/\u003e\n      \u003ctd\u003e\n        \u003cbutton type\u003d\"button\" class\u003d\"btnRunNow\"\u003eProcess recurrent tasks now\u003c/button\u003e \n        \u003cspan class\u003d\"btnRunNowStatus\"\u003e ... click button to run \u003c/span\u003e\n        \u003cp/\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr style\u003d\"vertical-align:top\"\u003e\n      \u003ctd\u003e \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/clock.png\" alt\u003d\"last run\"\u003e \u003c/td\u003e\n      \u003ctd\u003e\n        \u003ch2\u003eLast Run\u003c/h2\u003e\n        \u003cp/\u003e\n        \u003ctable\u003e\n          \u003ctr\u003e\n            \u003ctd\u003e\u003cb\u003eStarted at:\u003c/b\u003e\u003c/td\u003e \u003ctd\u003e\u003cspan id\u003d\"execStarted\"\u003e .\u003c/span\u003e\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd\u003e\u003cb\u003eFinished at:\u003c/b\u003e\u003c/td\u003e \u003ctd\u003e\u003cspan id\u003d\"execFinished\"\u003e .\u003c/span\u003e\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/table\u003e\n        \u003cp/\u003e\n        \u003cbutton type\u003d\"button\" id\u003d\"btnShowLog\"\u003eShow Log\u003c/button\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr style\u003d\"vertical-align:top\"\u003e\n      \u003ctd\u003e \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/uninstall.png\" alt\u003d\"uninstall\"\u003e \u003c/td\u003e\n      \u003ctd\u003e\n        \u003ch2\u003eUninstall\u003c/h2\u003e\n        \u003cp\u003e\n        If you would like to stop automatic execution of this app, then you can uninstall application triggers from here.\n        This step is also required if you would like to stop using this app completely.\n        \u003c/p\u003e\n        \u003cp style\u003d\"font-style: italic;\"\u003e\n        You still might be asked to grant authorization, so app can unistall triggers. After granting authorization Google will\n        send you an email with instructions how to revoke authorization again. \u003cbr\u003e \n        We are sorry about this \"stupid\" approach, but Google is unable to remove triggers while unistalling app in Chrome.\n        \u003c/p\u003e\n        \u003cp\u003e\n        \u003cbutton type\u003d\"button\" id\u003d\"btnUninstall\"\u003eUninstall Triggers\u003c/button\u003e \u003cspan id\u003d\"frmUninstallStatus\"\u003e \u003c/span\u003e\n        \u003c/p\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e    \n  \u003c/table\u003e\n\u003c/div\u003e\n\n\u003c!-- ********** SHOW LOG FILE --\u003e\n\n\u003cdiv id\u003d\"sectionLogFile\" class\u003d\"section\" style\u003d\"display:none\"\u003e\n  \u003ch2\u003eExecution Log\u003c/h2\u003e\n  \u003cbutton type\u003d\"button\" id\u003d\"btnShowMain\"\u003eBack\u003c/button\u003e\n  \u003cdiv id\u003d\"logfile\" class\u003d\"log\"\u003e\n    .. empty page?\n  \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- ********** MANAGE TASKS --\u003e\n\n\u003cdiv id\u003d\"sectionManage\" class\u003d\"section\" style\u003d\"display:none\"\u003e\n  \u003ch2\u003eManage Tasks\u003c/h2\u003e\n  \u003cp\u003e Select recurrent task list template (RTTL) and add/modify/remove recurrent task template.\u003c/p\u003e\n  \u003cp\u003e Once done, click \u003cbutton type\u003d\"button\" class\u003d\"btnRunNow\"\u003eProcess recurrent tasks now\u003c/button\u003e to apply. Status: (\u003cspan class\u003d\"btnRunNowStatus\"\u003e ... not started ... \u003c/span\u003e)\u003c/p\u003e\n\n  \u003cdiv style\u003d\"padding-bottom:10pt\"\u003e\n    \u003clabel for\u003d\"tasklist\"\u003eSelect a task list: \u003c/label\u003e\n    \u003cselect id\u003d\"tasklist\"\u003e\n      \u003coption\u003eLoading...\u003c/option\u003e\n    \u003c/select\u003e\n  \u003c/div\u003e\n  \n  \u003cdiv id\u003d\"noTaskListsPanel\" style\u003d\"padding-bottom:10pt\" style\u003d\"display:none\"\u003e\n    \u003cp style\u003d\"color:red\"\u003e No RTTL task list found. \u003ca class\u003d\"linkExample\" href\u003d\"\"\u003eClick here\u003c/a\u003e to create example task list containing templates of recurrent tasks. \u003c/p\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class\u003d\"taskTableHeader\"\u003e \u003ch2\u003eTasks\u003c/h2\u003e\u003c/div\u003e\n  \u003ctable id\u003d\"tasks\" width\u003d\"100%\"\u003e\n    \u003ctr\u003e\u003ctd\u003e Loading... \u003c/td\u003e\u003c/tr\u003e\n  \u003c/table\u003e\n\n\u003c/div\u003e\n\n\u003c!-- ********** DIALOG FOR DEFINING RECURRENCE PATTERN --\u003e\n\n\u003cdiv id\u003d\"recDialog\" class\u003d\"dialog\" style\u003d\"display:none\"\u003e\n  \u003ch2\u003eRecurrent Task\u003c/h2\u003e\n  \u003cinput type\u003d\"text\" id\u003d\"recTT\" title\u003d\"Task title\" size\u003d36\u003e\n  \u003ctextarea id\u003d\"recTNotes\" rows\u003d4 cols\u003d37 style\u003d\"margin-top:5px\"\u003e\u003c/textarea\u003e\n  \u003cinput type\u003d\"text\" id\u003d\"recTid\" style\u003d\"display:none\"\u003e\n  \u003ctable\u003e\n    \u003ctr\u003e\n      \u003cth\u003eRepeat Task\u003c/th\u003e\n      \u003ctd\u003e\n        \u003cselect id\u003d\"recType\"\u003e\n          \u003coption value\u003d\"D\"\u003edaily\u003c/option\u003e\n          \u003coption value\u003d\"W\"\u003eweekly\u003c/option\u003e\n          \u003coption value\u003d\"M\"\u003emonthly\u003c/option\u003e\n          \u003coption value\u003d\"Y\"\u003eyearly\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eRepeat every:\u003c/th\u003e\n      \u003ctd\u003e\n        \u003cselect id\u003d\"recFreq\"\u003e\n          \u003coption\u003eLoading...\u003c/option\u003e\n        \u003c/select\u003e\n        \u003cspan id\u003d\"recFreqWord\"\u003edays\u003c/span\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr id\u003d\"rowDoW\" style\u003d\"display:none\"\u003e\n      \u003cth\u003eRepeat on:\u003c/th\u003e\n      \u003ctd\u003e\n         \u003cspan id\u003d\"Sun0\"\u003e\u003c/span\u003e\n         \u003cinput type\u003d\"checkbox\" id\u003d\"recW1\" title\u003d\"Monday\"\u003eM\n         \u003cinput type\u003d\"checkbox\" id\u003d\"recW2\" title\u003d\"Tuesday\"\u003eT\n         \u003cinput type\u003d\"checkbox\" id\u003d\"recW3\" title\u003d\"Wednesday\"\u003eW\n         \u003cinput type\u003d\"checkbox\" id\u003d\"recW4\" title\u003d\"Thursday\"\u003eT\n         \u003cinput type\u003d\"checkbox\" id\u003d\"recW5\" title\u003d\"Friday\"\u003eF\n         \u003cinput type\u003d\"checkbox\" id\u003d\"recW6\" title\u003d\"Saturday\"\u003eS\n         \u003cspan id\u003d\"Sun7\"\u003e\u003c/span\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr id\u003d\"rowDoM\" style\u003d\"display:none\"\u003e\n      \u003cth\u003eRepeat on:\u003c/th\u003e\n      \u003ctd\u003e\n        \u003cselect id\u003d\"repOnDoM\"\u003e\n          \u003coption\u003eLoading...\u003c/option\u003e\n        \u003c/select\u003e\n        day of \u003cspan id\u003d\"txtMoY\"\u003emonth\u003c/span\u003e\u003cselect id\u003d\"repOnMoY\"\u003e\n          \u003coption\u003eLoading...\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eStart date:\u003c/th\u003e\n      \u003ctd\u003e \n        \u003cinput type\u003d\"text\" class\u003d\"datepick\" id\u003d\"recStartDate\" readonly\u003d\"true\"\u003e\n        \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/icon-clear-20px-grey.png\" alt\u003d\"clr\" class\u003d\"inline-icon\" id\u003d\"clrRecStart\" \u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eEnd date:\u003c/th\u003e\n      \u003ctd\u003e\n        \u003cinput type\u003d\"text\" class\u003d\"datepick\" id\u003d\"recEndDate\" readonly\u003d\"true\"\u003e\n        \u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/icon-clear-20px-grey.png\" alt\u003d\"clr\" class\u003d\"inline-icon\" id\u003d\"clrRecEnd\"  \u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/table\u003e\n\u003c/div\u003e\n\n\n\u003c!-- ********** SETTINGS --\u003e\n\n\u003cdiv id\u003d\"sectionSettings\" class\u003d\"section\" style\u003d\"display:none\"\u003e\n  \u003ch2\u003eSettings\u003c/h2\u003e\n  \u003cp\u003e Configure application settings.\u003c/p\u003e\n\n  \u003cform name\u003d\"settings\" id\u003d\"frmSettings\" \u003e\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eRTTL Name Prefix:\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cinput type\u003d\"text\" name\u003d\"rttl-prefix\" id\u003d\"rttl-prefix\" /\u003e \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cspan id\u003d\"rttl-count\"\u003e?\u003c/span\u003e existing list(s).\u003c/div\u003e\n    \u003c/div\u003e      \n    \n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"RTTL prefix\" is used to distinguish recurrent task lists (those used for storing recurrent tasks) from normal task lists. Every task list which would contain recurrent tasks should have title prefixed with this prefix.\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eDestination Task List:\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"dest-tasklist\"\u003e\n          \u003coption\u003e- Empty -\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Destination Task List\" is a task list into which app is going to crete tasks based on recurrent task templates. This SHOULD be your daily used task list. \u003cbr/\u003e\n      \u003cspan style\u003d\"color:red\"\u003e It should NOT be any of RTTL task lists.\u003c/span\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eProcessing Date Range:\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"dest-range\"\u003e\n          \u003coption value\u003d\"00\"\u003eonly today\u003c/option\u003e\n          \u003coption value\u003d\"14\"\u003e2 weeks\u003c/option\u003e\n          \u003coption value\u003d\"21\"\u003e3 weeks\u003c/option\u003e\n          \u003coption value\u003d\"28\"\u003e4 weeks\u003c/option\u003e\n          \u003coption value\u003d\"42\"\u003e6 weeks\u003c/option\u003e\n          \u003coption value\u003d\"56\"\u003e8 weeks\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Processing Date Range\" is a number of days into the future for which app is going to create tasks from task templates. E.g. 3 weeks, means app will limit creation of tasks to 21 day from the day it calculates the tasks.\n    \u003c/div\u003e\n\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eLog Verbosity Level:\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"log-level\"\u003e\n          \u003coption value\u003d\"01\"\u003eOnly critical messages\u003c/option\u003e\n          \u003coption value\u003d\"02\"\u003eWarnings too\u003c/option\u003e\n          \u003coption value\u003d\"03\"\u003eShow info\u003c/option\u003e\n          \u003coption value\u003d\"04\"\u003eEven extended info\u003c/option\u003e\n          \u003coption value\u003d\"10\"\u003eInclude Developer info\u003c/option\u003e\n          \u003coption value\u003d\"20\"\u003eDebug to task notes\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Log Verbosity Level\" defines how many detail app will put into a log file. Log file can help you in case you will feel something is not right. When contacting support, make sure to set it to \"Developer\" level.\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eDate format:\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"dateFmt\"\u003e\n          \u003coption value\u003d\"1\"\u003eOld: MM/DD YYYY-MM-DD\u003c/option\u003e\n          \u003coption value\u003d\"2\"\u003e US: MM/DD MM/DD/YYYY\u003c/option\u003e\n          \u003coption value\u003d\"3\"\u003e UK: DD/MM DD/MM/YYYY\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Date Format\" impacts how dates are understood. It impacts both \"yearly\" recurrence type, \n      where you need to specity month and day of year (MM/DD or DD/MM), and dates entered \n      for start and end of the task validity (YYYY-MM-DD, MM/DD/YYYY, DD/MM/YYYY).\n      \u003cp style\u003d\"color:red\"\u003e Changing this setting WILL require you to modify recurrence patterns\n      in your recurrent tasks notes to comform new format as the old ones might be wrongly understood.\u003c/p\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eWeek Starts on\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"weekStart\"\u003e\n          \u003coption value\u003d\"S\"\u003eSunday\u003c/option\u003e\n          \u003coption value\u003d\"M\"\u003eMonday\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Week Starts On\" impacts how tasks repeating weekly are evaluated as 1-7 stands for Sunday-Saturday if week starts on Sunday,\n      but 1-7 stands for Monday-Sunday if week starts on Monday.\n      \u003cp style\u003d\"color:red\"\u003e Changing this setting WILL initially create duplicates for tasks recurring weekly. \n      Please, modify this only if you have only few recurring tasks \n      or you are ready to perform manual task clensing afterwards.\u003c/p\u003e\n    \u003c/div\u003e\n\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eTime Zone\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"userTMZ\"\u003e\n          \u003coption value\u003d\"GMT\"\u003eGMT\u003c/option\u003e\n          \u003coption value\u003d\"Europe/London\"\u003eEurope/London\u003c/option\u003e\n          \u003coption value\u003d\"Europe/Berlin\"\u003eEurope/Berlin\u003c/option\u003e\n          \u003coption value\u003d\"Europe/Athens\"\u003eEurope/Athens\u003c/option\u003e\n          \u003coption value\u003d\"Europe/Moscow\"\u003eEurope/Moscow\u003c/option\u003e\n          \u003coption value\u003d\"US/Eastern\"\u003eUS/Eastern\u003c/option\u003e\n          \u003coption value\u003d\"US/Central\"\u003eUS/Central\u003c/option\u003e\n          \u003coption value\u003d\"US/Mountain\"\u003eUS/Mountain\u003c/option\u003e\n          \u003coption value\u003d\"US/Pacific\"\u003eUS/Pacific\u003c/option\u003e\n          \u003coption value\u003d\"US/Hawaii\"\u003eUS/Hawaii\u003c/option\u003e\n          \u003coption value\u003d\"Australia/Perth\"\u003eAustralia/Perth\u003c/option\u003e\n          \u003coption value\u003d\"Australia/Darwin\"\u003eAustralia/Darwin\u003c/option\u003e\n          \u003coption value\u003d\"Australia/Sydney\"\u003eAustralia/Sydney\u003c/option\u003e\n          \u003coption value\u003d\"Pacific/Auckland\"\u003ePacific/Auckland\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Time Zone\" is used when calculating your local date and time for e.g. sliding the tasks correctly.\n      Default server time is GMT.\n    \u003c/div\u003e\n\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eIgnore Deleted Tasks\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"ignoreDeleted\"\u003e\n          \u003coption value\u003d\"Y\"\u003eIgnore\u003c/option\u003e\n          \u003coption value\u003d\"N\"\u003eDo not ignore\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      \"Ignore Deleted Tasks\" changes the way how deleted recurrent tasks are treated. By default, deleted tasks are ignored,\n      so if you delete future recurrent task, app will re-create such task in the next run. The only way how to get rid of it is to\n      flag it as \"complete\". An alternative is NOT ignoring deleted tasks. App will detect task has been deleted and won\u0027t create it\n      again for that date.\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eSlide Overdue Tasks\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"slideOverdue\"\u003e\n          \u003coption value\u003d\"N\"\u003eDo not slide\u003c/option\u003e\n          \u003coption value\u003d\"Y\"\u003eSlide to Today\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      Enabling \"Slide Overdue Tasks\" will cause all not completed past due tasks be moved (to \"slide\") to the current date \"Today\".\n      This impacts both recurring and non-recurring tasks. Sliding also removes duplicates of overdue tasks.\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cdiv class\u003d\"settings3\"\u003eAppend Recurrence Pattern\u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\n        \u003cselect id\u003d\"appendRecPattern\"\u003e\n          \u003coption value\u003d\"N\"\u003eDo not append\u003c/option\u003e\n          \u003coption value\u003d\"Y\"\u003eAppend\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class\u003d\"settings3\"\u003e\u003cbr/\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class\u003d\"setting help-settings\"\u003e\n      Enabling \"Append Recurrence Pattern\" will show recurrence pattern at the end of the task notes.\n    \u003c/div\u003e\n\n    \u003cdiv class\u003d\"setting\"\u003e\n      \u003cinput type\u003d\"submit\" name\u003d\"save\" id\u003d\"btnSaveSettings\" value\u003d\"Save Settings\" /\u003e\n      \u003cspan id\u003d\"frmSaveStatus\"\u003e\u003c/span\u003e\n    \u003c/div\u003e\n\n  \u003c/form\u003e\n\u003c/div\u003e\n\n\u003c/div\u003e \n\u003c!-- ********** END OF SECTIONS --\u003e\n\n\u003c/div\u003e\n\u003c!-- ********** END OF APP --\u003e\n\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027scripts-common\u0027).getContent(); ?\u003e\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027scripts-gen-tasks\u0027).getContent(); ?\u003e\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027scripts-settings\u0027).getContent(); ?\u003e\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027scripts-manage\u0027).getContent(); ?\u003e\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027scripts-main\u0027).getContent(); ?\u003e\n\n\u003c?!\u003d HtmlService.createHtmlOutputFromFile(\u0027scripts\u0027).getContent(); ?\u003e\n\n\n"},{"id":"e342c5a5-4272-4261-a136-3226eff74cdf","name":"stylesheet","type":"html","source":"\u003clink rel\u003d\"stylesheet\" href\u003d\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css\"\u003e\n\n\u003c!-- Custom styles. --\u003e\n\u003cstyle\u003e\n  body {\n    font-family: Ubuntu, sans-serif;\n    font-size: 11pt;\n  }\n  \n  .subtitle {\n    font-size: 14pt;\n    color: darkgray;\n    margin-bottom: 25pt;\n  }\n  \n  i { \n    font-style: italic;\n  }\n  \n  h1 {\n    margin-top: 0px;\n    margin-bottom: 1pt;\n    margin-left: 0px;\n    margin-right: 0px;\n    font-family: Ubuntu, sans-serif;\n    font-weight: lighter;\n    \n  }\n  \n  h2 {\n    font-weight: lighter;\n    font-family: Ubuntu, sans-serif;\n  }\n  \n  th {\n    text-align: left;\n  }\n  \n  .log {\n    font-family: \"Courier New\", Courier, monospace;\n  }\n  \n  .app {\n    max-width: 1000px;\n    height: 100%;\n  }\n  \n  .navBar {\n    float: left;\n    width: 77px;\n    padding: 0px;\n  }\n  \n  .navBarBlank {\n    height: 1100px;\n    background-color: #4987EA;\n  }\n  \n  .navBarItem {\n    width: 100%;\n    height: 77px;\n  }\n  \n  .navBarItemSelected {\n    width: 100%;\n    height: 77px;\n    color: #FFFFFF;\n    opacity: 0.5;\n  }  \n\n  .sections {\n    max-width: 700px;\n    min-width: 600px\n    background-color: #FFFFFF;\n    padding: 20pt 20pt;\n    overflow: hidden;\n }\n  \n  .section {\n    width: 100%;\n  }\n  \n  .taskRow {\n    padding-top: 5pt;\n    padding-bottom: 5pt;\n    border-bottom-width: 2px;\n    border-bottom-style: solid;\n    border-bottom-color: #EDEEF3;\n  }\n\n  .taskItem {\n    display: table-cell;\n    float: left;\n  }\n\n\n  .taskTableHeader {\n    padding: 5pt;\n    background-color: #EDEEF3;\n  }\n  \n  .setting {\n    margin-top: 5pt;\n    margin-bottom: 5pt;\n    vertical-align:middle;\n    float:left;\n    display: table-row;\n    width: 100%;\n  }\n  \n  .settings3 {\n    display: table-cell;\n    width: 33%;\n    float:left;\n  }\n  \n  .help-settings {\n    display:block;\n    float:left;\n    width:100%;\n    background-color: whitesmoke;\n    padding: 10pt;\n    color:#8A8A8A;    \n  }\n  \n  .recDialog .ui-dialog-titlebar {\n    display:none\n  }  \n  \n  .inline-icon {\n    vertical-align: text-bottom;\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n  \n  .icon-delete {}\n\n\u003c/style\u003e\n"},{"id":"d5098cd1-31e2-452d-bbcf-6a76c50e0013","name":"scripts","type":"html","source":"\u003c!-- Load the jQuery and jQuery UI libraries. --\u003e\n\u003cscript src\u003d\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js\"\u003e\u003c/script\u003e\n\n\n\u003cscript\u003e\n\n// Copyright (c) 2015-2018 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// When the page loads.\n$(function() {\n  initNavBar();\n  loadSettings();\n  getUserAccount(); \n     \n  $(\u0027#frmSettings\u0027).submit(function(e) { saveSettings(); return false });\n  $(\u0027.btnRunNow\u0027).on(\u0027click\u0027, runNow);\n  $(\u0027#btnShowLog\u0027).on(\u0027click\u0027, showLog);\n  $(\u0027#btnShowMain\u0027).on(\u0027click\u0027, showMain);\n  $(\u0027#navBarItmOverview\u0027).on(\u0027click\u0027, showMain);\n  $(\u0027#navBarItmManage\u0027).on(\u0027click\u0027, showManage);\n  $(\u0027#navBarItmSettings\u0027).on(\u0027click\u0027, showSettings);\n  $(\u0027.linkExample\u0027).on(\u0027click\u0027, createExampleList);\n  $(\u0027#btnUninstall\u0027).on(\u0027click\u0027, uninstallTriggers);\n  $(\u0027#btnInstTrigger\u0027).on(\u0027click\u0027, function(){installTriggers($(\u0027#userTMZ\u0027).val());});\n    \n  \n  showMain();\n\n});\n\n//---------------------------------------------------------------------------------\nfunction initNavBar(){\n  hideAllSections();\n  $(\u0027#navBarItmOverview\u0027).css(\"background\",\"url(https://sites.google.com/site/recgtasks/images/navbar-main.png)\");\n  $(\u0027#navBarItmManage\u0027).css(\"background\",\"url(https://sites.google.com/site/recgtasks/images/navbar-manage.png)\");\n  $(\u0027#navBarItmSettings\u0027).css(\"background\",\"url(https://sites.google.com/site/recgtasks/images/navbar-settings.png)\");\n}\n\n//--------------------------------------------------------------------------------- \nfunction hideAllSections(){\n  $(\u0027.section\u0027).hide();\n  $(\u0027.navBarItemSelected\u0027).addClass(\"navBarItem\");\n  $(\u0027.navBarItem\u0027).removeClass(\"navBarItemSelected\");\n}\n\n//---------------------------------------------------------------------------------\nfunction showMain() {\n  hideAllSections();\n  $(\u0027#navBarItmOverview\u0027).addClass(\"navBarItemSelected\");\n  $(\u0027#navBarItmOverview\u0027).removeClass(\"navBarItem\");\n  $(\u0027#sectionMain\u0027).show();\n  checkTriggers();\n  getRuntimeDetails();\n}\n\n//---------------------------------------------------------------------------------\nfunction showSettings() {\n  hideAllSections();\n  $(\u0027#sectionSettings\u0027).show();\n  $(\u0027#navBarItmSettings\u0027).addClass(\"navBarItemSelected\");\n  $(\u0027#navBarItmSettings\u0027).removeClass(\"navBarItem\");\n  \n  loadTaskLists(showTaskLists_Settings);\n  \n}\n\n//---------------------------------------------------------------------------------\nfunction showManage() {\n  hideAllSections();\n  initManage();\n  $(\u0027#sectionManage\u0027).show();\n  $(\u0027#navBarItmManage\u0027).addClass(\"navBarItemSelected\");\n  $(\u0027#navBarItmManage\u0027).removeClass(\"navBarItem\");\n  \n  loadTaskLists(showTaskLists_Manage);\n  \n}\n\n//---------------------------------------------------------------------------------\nfunction showErrorWindow(error, msg) {\n    console.log(msg);\n    console.log(error);\n    window.alert(\u0027An error has occurred, please try again.\\r\u0027+msg);\n  }\n\n\u003c/script\u003e\n\n\u003cscript\u003e\n  (function(i,s,o,g,r,a,m){i[\u0027GoogleAnalyticsObject\u0027]\u003dr;i[r]\u003di[r]||function(){\n  (i[r].q\u003di[r].q||[]).push(arguments)},i[r].l\u003d1*new Date();a\u003ds.createElement(o),\n  m\u003ds.getElementsByTagName(o)[0];a.async\u003d1;a.src\u003dg;m.parentNode.insertBefore(a,m)\n  })(window,document,\u0027script\u0027,\u0027//www.google-analytics.com/analytics.js\u0027,\u0027ga\u0027);\n\n  ga(\u0027create\u0027, \u0027UA-68118166-3\u0027, \u0027auto\u0027);\n  ga(\u0027send\u0027, \u0027pageview\u0027);\n\n\u003c/script\u003e"},{"id":"00f46f75-e9fb-44d8-83c6-435064c260cd","name":"RecurrentTask","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction RecurrentTask(t) {\n  // RecurrentTask object constructor\n  \n  this.title \u003d t;\n  this.notes \u003d \"\";\n  this.recDef \u003d new Record_RGT();\n\n}\n\n\n"},{"id":"07c6c41e-673c-4a72-94e9-ea65da6e33b5","name":"TaskCalendar","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//*********************************************************\n\nfunction TaskCalendar() {\n  // TaskCalendar object constructor\n  \n  // array dayTasks will contain matrix [month][day] containing array of tasks for each specific day (if any)\n  this.dayTasks \u003d [[],[],[],[],[],[],[],[],[],[],[],[]];\n  \n  for (var m \u003d 0; m \u003c 12;m++) \n  // IMPORTANT: there are 32 items on [day] dimension, that\u0027s because \n  //  - item #0 is ignored and won\u0027t be processed - days are indexed 1-31, so zero is not used (unlike months, which are indexed 0-11)\n  //  - we assume each month has 31 days, for months, where there are less real days, than 31, tasks occuring on non-existing days will be processed specially \n    this.dayTasks[m] \u003d [[],\n                        [],[],[],[],[],[],[],[],[],[],\n                        [],[],[],[],[],[],[],[],[],[],\n                        [],[],[],[],[],[],[],[],[],[],[]];\n  \n  // how many day there are in each calendar month?\n  this.monthDays \u003d [31,28,31,30,31,30,31,31,30,31,30,31];\n  \n  // leap year handling\n  var d \u003d new Date();\n  // check if 200 days in the future is already leap year \n  // (as there is only 12 months considered in this algorithm this should be sufficient)\n  // makes no sense checking if the current year is leap year as calculating days in December \n  // would result in wrong calculation of the coming February  \n  d.setDate(d.getDate()+200); \n  if (leapYear(d.getFullYear()))\n    this.monthDays[1] \u003d 29;\n  \n  // caching time zone offset string for faster processing    \n  this.TZoffset \u003d tzOffsetString();\n  \n  this.localeDateFormat \u003d \"1\"; // date format - default is \"old\"\n  this.localeWeekStartsOn \u003d \"S\"; //weeks starts on \"Sunday\" by default, but \"M\" for \"Monday\" is possible too\n  \n  this.appendRecPattern \u003d false;\n\n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.setLocale \u003d function(ws, dtfmt) {\n  this.localeWeekStartsOn \u003d ws;\n  this.localeDateFormat \u003d dtfmt;\n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.appendPattern \u003d function(a) {\n  this.appendRecPattern \u003d a;\n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.setLogLevel \u003d function(a) {\n  this.logLevel \u003d a;\n}\n\n\n\n//--------------------------------------------------\nTaskCalendar.prototype.copyTask \u003d function(task) {\n  // simple function creating simplified copy of a Task object\n  var t \u003d {};\n  \n  t.title \u003d task.title;\n  t.notes \u003d task.notes;\n  t.due \u003d task.due;\n  \n  return t;\n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.alignMonthDays \u003d function(m, dom) {\n  // based on provided month and day-of-month function returns\n  // day-of-month value if day-of-month does not exceeds number of days in specified month\n  // otherwise it returns the last day of specified month\n  \n  var d;\n  \n  m \u003d m % 12; // just in case\n      \n  if (dom \u003e this.monthDays[m]) \n    d \u003d this.monthDays[m]\n  else\n    d \u003d dom;\n\n  return d;\n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.createTasks_DoM \u003d function(task, rS, rE) {\n  //create \"Day of Month recurrence\" task occurences\n  //params:\n  //   task - task\n  //   rangeStart, rangeEnd - start and end date for data range to be considered\n\n  var rangeStart \u003d (task.recDef.recStart.date \u003e rS ? new Date(task.recDef.recStart.date.getTime()) : new Date(rS.getTime()));\n  var rangeEnd \u003d new Date(rE.getTime());\n\n  //var y \u003d rangeStart.getFullYear();\n  var y \u003d task.recDef.recStart.date.getFullYear();\n  \n  // if recurrence started in the previous years, then the first month of occurence is now\n  // if recurrence started this year, then take first month from recurrence start date\n  //var m \u003d (task.recDef.recStart.date.getFullYear() \u003c y)? rangeStart.getMonth():task.recDef.recStart.date.getMonth();\n  var m \u003d task.recDef.recStart.date.getMonth();\n  var d \u003d this.alignMonthDays(m, task.recDef.monthly.day);\n  var t;\n  var tlog \u003d \"\";\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog \u003d \"\\nDebug:\";\n  }\n  \n  if (rangeEnd \u003e task.recDef.recEnd.date) \n    rangeEnd \u003d task.recDef.recEnd.date; // do not calculate behind the recurrence validity end\n  \n  var dt \u003d new Date(y, m, d, 0, 0, 0, 0);\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence will be on m\u003d%s, dt\u003d%s\u0027, m, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n1st m\u003d\"+m+\" dt\u003d\"+dt.toISOString();\n  }\n  \n  while (dt \u003c rangeStart) {\n    m +\u003d task.recDef.frequency;\n    d \u003d this.alignMonthDays(m % 12, task.recDef.monthly.day);    \n    dt \u003d new Date(y, m, d, 0, 0, 0, 0);\n  }\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence after adjustment is on m\u003d%s, dt\u003d%s\u0027, m, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n1adj m\u003d\"+m+\" dt\u003d\"+dt.toISOString();\n  }\n  \n  \n  while (dt \u003c\u003d rangeEnd) {\n    t \u003d this.copyTask(task);\n    t.due \u003d date2rfc3339(dt, this.TZoffset); //Google Tasks require due date to be written in rfc3339 format\n    t.due2msec \u003d dt.getTime(); //secondary due date kept for further internal processing\n    \n    logIt(LOG_DEV, \u0027    \u003e\u003e\u003e Creating instance %s ** %s/%s\u0027, dt, m, d);\n    if (this.logLevel \u003e\u003d LOG_TRACE){\n      tlog +\u003d \"\\ninst m\u003d\"+m+\" dt\u003d\"+t.due;\n    }\n    \n    t.notes +\u003d tlog;\n    this.dayTasks[m % 12][d].push(t); //append to the end \n    \n    m +\u003d task.recDef.frequency;\n    d \u003d this.alignMonthDays(m % 12, task.recDef.monthly.day);\n    dt \u003d new Date(y, m, d, 0, 0, 0, 0);\n\n  }\n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.createTasks_DoY \u003d function(task, rS, rE) {\n  //create \"Date of Year recurrence\" task occurences\n  //params:\n  //   task - task\n  //   rS, rE - start and end date for data range to be considered\n\n  var rangeStart \u003d (task.recDef.recStart.date \u003e rS ? new Date(task.recDef.recStart.date.getTime()) : new Date(rS.getTime()));\n  var rangeEnd \u003d new Date(rE.getTime());\n\n  var y \u003d task.recDef.recStart.date.getFullYear();\n  var m \u003d task.recDef.yearly.month % 12;\n  var d \u003d this.alignMonthDays(m, task.recDef.yearly.day);\n  var t;\n  var tlog \u003d \"\";\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog \u003d \"\\nDebug:\";\n  }\n\n  \n  if (rangeEnd \u003e task.recDef.recEnd.date) \n    rangeEnd \u003d task.recDef.recEnd.date; // do not calculate behind the recurrence validity end\n  \n  var dt \u003d new Date(rangeStart.getTime());\n  dt.setTime(task.recDef.recStart.date.getTime());\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence will be on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n1st dt\u003d\"+dt.toISOString();\n  }\n  \n  dt.setDate(this.alignMonthDays(task.recDef.yearly.month % 12, task.recDef.yearly.day));\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#1 on %s\u0027, dt);  \n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n1adj dt\u003d\"+dt.toISOString();\n  }\n   \n  dt.setMonth(task.recDef.yearly.month % 12);\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#2 on %s\u0027, dt);      \n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n2adj dt\u003d\"+dt.toISOString();\n  }\n  \n  while (dt \u003c rangeStart) {\n    y +\u003d task.recDef.frequency;\n    dt.setFullYear(y);\n  }\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#3 on %s\u0027, dt);  \n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n3adj dt\u003d\"+dt.toISOString();\n  }\n  \n  \n  while (dt \u003c\u003d rangeEnd) {\n    t \u003d this.copyTask(task);\n    t.due \u003d date2rfc3339(dt, this.TZoffset); //Google Tasks require due date to be written in rfc3339 format\n    t.due2msec \u003d dt.getTime(); //secondary due date kept for further internal processing\n    \n    if (this.logLevel \u003e\u003d LOG_TRACE){\n      tlog +\u003d \"\\ninst m\u003d\"+m+\" dt\u003d\"+t.due;\n    }\n    \n    t.notes +\u003d tlog;\n    logIt(LOG_DEV, \u0027    \u003e\u003e\u003e Creating instance %s ** %s/%s\u0027, dt, m, d);\n    \n    this.dayTasks[m][d].push(t); //append to the end \n    \n    y +\u003d task.recDef.frequency;\n    dt.setFullYear(y);\n  }\n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.createTasks_DAY \u003d function(task, rS, rE) {\n  //create \"Every X days recurrence\" task occurences\n  //params:\n  //   task - task\n  //   rS, rE - start and end date for data range to be considered\n  \n  var rangeStart \u003d (task.recDef.recStart.date \u003e rS ? new Date(task.recDef.recStart.date.getTime()) : new Date(rS.getTime()));\n  var rangeEnd \u003d new Date(rE.getTime());\n  \n  var d \u003d (rangeStart.getTime() - task.recDef.recStart.date.getTime()) / 86400000; //difference in miliseconds to days\n  d \u003d Math.floor(d % task.recDef.frequency); // number of days since last calculated occurence rounded to WHOLE days\n  var m;\n  var t;\n  var tlog \u003d \"\";\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog \u003d \"\\nDebug:\";\n  }  \n  \n  if (rangeEnd \u003e task.recDef.recEnd.date) \n    rangeEnd \u003d task.recDef.recEnd.date; // do not calculate behind the recurrence validity end\n  \n  var dt \u003d new Date(rangeStart.getTime());\n  dt.setHours(0,0,0,0);\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence will be on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n1st dt\u003d\"+dt.toISOString();\n  }  \n  \n  dt.setDate(dt.getDate() - d); // date of the previous occurence\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#1 on %s\u0027, dt);  \n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\nadj1 dt\u003d\"+dt.toISOString();\n  }  \n  \n  if (dt \u003c rangeStart) // if outside the range, then add one occurence\n    dt.setDate(dt.getDate() + task.recDef.frequency);\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#2 on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\nadj2 dt\u003d\"+dt.toISOString();\n  }  \n  \n  \n  while (dt \u003c\u003d rangeEnd) {\n    t \u003d this.copyTask(task);\n    t.due \u003d date2rfc3339(dt, this.TZoffset); //Google Tasks require due date to be written in rfc3339 format\n    t.due2msec \u003d dt.getTime(); //secondary due date kept for further internal processing\n    \n    d \u003d dt.getDate();\n    m \u003d dt.getMonth();\n    \n    if (this.logLevel \u003e\u003d LOG_TRACE){\n      tlog +\u003d \"\\ninst dt\u003d\"+t.due;\n    }\n    \n    t.notes +\u003d tlog;\n    logIt(LOG_DEV, \u0027    \u003e\u003e\u003e Creating instance %s ** %s ** %s/%s\u0027, dt, t.due, m, d);\n    this.dayTasks[m][d].push(t); //append to the end \n    \n    dt.setDate(dt.getDate()+task.recDef.frequency);\n  }\n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.createTasks_DoW \u003d function(task, rS, rE) {\n  //create \"Every X weeks on specified days\" task occurences\n  //params:\n  //   task - task\n  //   rS, rE - start and end date for data range to be considered\n  \n  var weekMS \u003d 7 * 86400000; // milliseconds in a week\n  \n  var tlog \u003d \"\";\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog \u003d \"\\nDebug:\";\n  }\n  \n  // make sure recStart is the first day of week\n  task.recDef.recStart.date.setDate(task.recDef.recStart.date.getDate()-task.recDef.recStart.date.getDay());\n  \n  //if week starts on Monday, then let\u0027s move to Monday\n  if (this.localeWeekStartsOn \u003d\u003d \"M\") \n    task.recDef.recStart.date.setDate(task.recDef.recStart.date.getDate() + 1);\n  \n  var rangeStart \u003d (task.recDef.recStart.date \u003e rS ? new Date(task.recDef.recStart.date.getTime()) : new Date(rS.getTime()));\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e DoW#00 rangeStart, recStart: %s,%s\u0027, rangeStart, task.recDef.recStart.date);\n  var rangeEnd \u003d new Date(rE.getTime());\n  \n  var d \u003d (rangeStart.getTime() - task.recDef.recStart.date.getTime()) / weekMS; //difference in miliseconds to weeks\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e DoW#01 d, floor(d), frequency: %s,%s,%s\u0027, d, Math.floor(d % task.recDef.frequency), d % task.recDef.frequency);\n  d \u003d Math.floor(d % task.recDef.frequency); // number of weeks since last calculated occurence rounded to WHOLE weeks\n  var m;\n  var w;\n  \n  var dt \u003d new Date(rangeStart.getTime());\n  dt.setHours(0,0,0,0);\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence will be on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\n1st dt\u003d\"+dt.toISOString();\n  }  \n  \n  var eow \u003d new Date(); // end of week\n  \n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e DoW#10 RangeEnd %s\u0027, rangeEnd);\n  if (rangeEnd \u003e task.recDef.recEnd.date) \n    rangeEnd \u003d task.recDef.recEnd.date; // do not calculate behind the recurrence validity end\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e DoW#15 RangeEnd %s\u0027, rangeEnd);    \n  \n  dt.setDate(dt.getDate() - dt.getDay()); // the last Sunday (beginning of the week)\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#1 on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\nadj1 dt\u003d\"+dt.toISOString();\n  }    \n  \n  if (this.localeWeekStartsOn \u003d\u003d \"M\") //if week starts on Monday, then let\u0027s move to Monday\n    dt.setDate(dt.getDate() + 1);\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#2 on %s\u0027, dt);  \n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\nadj2 dt\u003d\"+dt.toISOString();\n  }    \n  \n  \n  dt.setDate(dt.getDate() - (d*7)); // move weeks back to the past to when recurrence start was set\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#3 on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\nadj3 dt\u003d\"+dt.toISOString();\n  }    \n  \n  eow.setTime(dt.getTime() + weekMS-1 ); // end of week is beginning of week plus milliseconds of one week\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e DoW#30 eow %s\u0027, eow);\n  \n  if (eow \u003c rangeStart) // if outside the range, then add one occurence\n      dt.setDate(dt.getDate() + (task.recDef.frequency * 7));\n  logIt(LOG_DEV, \u0027    \u003e\u003e\u003e First occurence adj#4 on %s\u0027, dt);\n  if (this.logLevel \u003e\u003d LOG_TRACE){\n    tlog +\u003d \"\\nadj4 dt\u003d\"+dt.toISOString();\n  }    \n  \n  while (dt \u003c\u003d rangeEnd) {\n    logIt(LOG_DEV, \u0027    \u003e\u003e\u003e DoW#60 dt %s\u0027, dt);\n    eow.setTime(dt.getTime() + weekMS-1 );\n    \n    for (i\u003d0;i\u003c7;i++) {\n      \n      if (dt \u003e\u003d rangeStart \u0026\u0026 dt \u003c\u003d rangeEnd) {\n        if (task.recDef.weekly.days_of_week[\"S\" \u003d\u003d this.localeWeekStartsOn ? i : (i+1)%7]){  // as [0] is always Sunday, some calculation is needed for Monday starts\n          t \u003d this.copyTask(task);\n          t.due \u003d date2rfc3339(dt, this.TZoffset); //Google Tasks require due date to be written in rfc3339 format\n          t.due2msec \u003d dt.getTime(); //secondary due date kept for further internal processing\n    \n          d \u003d dt.getDate();\n          m \u003d dt.getMonth();\n          \n          if (this.logLevel \u003e\u003d LOG_TRACE){\n            tlog +\u003d \"\\ninst dt\u003d\"+t.due;\n          }\n          \n          t.notes +\u003d tlog;          \n    \n          logIt(LOG_DEV, \u0027    \u003e\u003e\u003e Creating instance %s ** %s ** %s/%s\u0027, dt, t.due, m, d);\n          this.dayTasks[m][d].push(t); //append to the end \n        }\n      }\n      \n      dt.setDate(dt.getDate() + 1); // move to the next day\n      \n    }\n    \n    dt.setDate(dt.getDate()+7*(task.recDef.frequency-1)); //skip to the next frequency\n  }\n  \n}\n\n//--------------------------------------------------\n\nTaskCalendar.prototype.processRecTasks \u003d function (rTasks, rangeStart, rangeEnd) {\n  // process all tasks from a specified task list and enter them into specified task calendar object\n  //\n  // rTasks - array of tasks to be processed\n  // rangeStart, rangeEnd - date range for which tasks will be created\n  \n  var parser \u003d new Record_Parser();\n  \n  parser.setWeekStart(this.localeWeekStartsOn);\n  parser.setDateFmt(this.localeDateFormat);\n  \n  logIt(LOG_EXTINFO,\u0027  \u003e Parser Fmt %s, %s\u0027, parser.locFmt.weekStartsOn, this.localeWeekStartsOn);\n  \n  var n, i, ii;\n    \n  if (rTasks.length \u003d\u003d 0) {\n    logIt(LOG_INFO,\u0027  \u003e No tasks found in the task list.\u0027);\n    return;\n  }\n  \n  for (var i \u003d 0; i \u003c rTasks.length; i++) {\n    var t \u003d new RecurrentTask(\"no title\");\n    parser.err.reset();\n    t.title \u003d rTasks[i].title;\n    t.notes \u003d rTasks[i].notes;\n    t.recDef.setDateFmt(this.localeDateFormat);\n    t.recDef.setWeekStart(this.localeWeekStartsOn);\n\n    logIt(LOG_EXTINFO,\u0027  \u003e Task \u003cb\u003e\"%s\"\u003c/b\u003e\u0027, t.title);\n    \n      \n    n \u003d t.notes;\n    // scan notes lines to find one containing recurrency pattern definition\n    // and parse only if recurrency definition was found\n    if (n \u0026\u0026 (ii \u003d n.search(parser.sx_recordId_RGT[0])) \u003e\u003d 0 ) {\n    \n      //recurrence pattern found in notes -\u003e cut it out from notes\n      t.notes \u003d n.slice(0,ii);\n      n \u003d n.slice(ii);\n      ii \u003d n.search(/\\n/);\n      if (ii \u003e 0) {\n        t.notes +\u003d n.slice(ii+1);\n        n \u003d n.slice(0,ii);\n      }\n\n      if (this.appendRecPattern){\n        logIt(LOG_DEV, \u0027    \u003e\u003e appending to notes \"%s\"\u0027, n);\n        t.notes +\u003d \u0027\\n\\n\u0027+n; //append recurrence pattern to the end of the notes\n      }\n      //logIt(LOG_DEV, \u0027    \u003e\u003e appending id to notes %s\u0027,rTasks[i].id);\n      //t.notes +\u003d  (\u0027\\n@ID:\u0027+rTasks[i].id); //append recurrent task id to the end of task notes\n\n      logIt(LOG_DEV, \u0027    \u003e\u003e to be parsed #1 \"%s\"\u0027, n);\n\n      parser.doParse(n,t.recDef); \n\n      if (parser.err.code !\u003d parser.PARSE_OK){\n        logIt(LOG_CRITICAL,\u0027  \u003e Task parsing error - task ignored \"%s\"\u0027, t.title);\n        logIt(LOG_WARN,\u0027    \u003e\u003e Status: %s, %s\u0027, parser.err.code, parser.err.text);\n      } else {\n        \n        //logIt(LOG_DEV, \u0027    \u003e\u003e parsed \"%s\"\u0027, JSON.stringify(t.recDef));\n        \n        // if no recurrency start date defined, then let it be January 1st, 2000\n        if (t.recDef.recStart.date \u003d\u003d null) \n          t.recDef.recStart.date \u003d new Date(2000, 0, 1);\n\n        // if no recurrency end date defined, then let it be January 1st, 3000\n        if (t.recDef.recEnd.date \u003d\u003d null) \n          t.recDef.recEnd.date \u003d new Date(3000, 0, 1);\n          \n        // if task validity falls inside daterange to be generated, then let\u0027s generate instances of it\n        if ((t.recDef.recStart.date \u003c\u003d rangeEnd) \u0026\u0026 ( rangeStart \u003c\u003d t.recDef.recEnd.date)){\n          logIt(LOG_DEV, \u0027  \u003e\u003e notes\u003d\"%s\"\u0027,t.notes);\n          this.createTasks(t, rangeStart, rangeEnd);\n        } else {\n          logIt(LOG_DEV, \u0027    \u003e\u003e out of range VS: %s VE: %s\u0027, t.recDef.recStart.date, t.recDef.recEnd.date); \n        }\n      }\n         \n    } else \n      logIt(LOG_EXTINFO, \u0027    \u003e\u003e not parsed - missing recurrency pattern\u0027);\n  } \n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.createTasks \u003d function(rTask, rangeStart, rangeEnd) {\n  // process specific recurrent task, analyze recurrency pattern and create simple tasks based on the recurrency pattern\n  // supported patterns:\n  //   DOM - monthly on specific day of a month (parameters: DD {day of a month})\n  //   DOY - yearly on specific day of a year (parameters: MM/DD {month of a year}/{day of a month})\n  //   DAY - daily every X day (parameters: none)\n  //   DOW - weekly on specified days (parameters: string containing days of week 1-Sunday, ..., 6-Saturday, e.g. 134 \u003d Sunday, Tuesday, Wednesday)\n  var p1, p2\n  \n  logIt(LOG_DEV, \u0027    \u003e\u003e Processing %s\u0027,rTask.title);\n  \n  if (rTask.recDef.frequency \u003e 1 \u0026\u0026 rTask.recDef.recStart.date \u003d\u003d null)\n    logIt(LOG_WARN, \u0027    \u003e\u003e Start date for task having frequency \u003e 1 not specified - task deadline might be calculated wrongly\u0027);\n    \n  if (rTask.recDef.recStart.date \u003c\u003d rangeEnd \u0026\u0026 rTask.recDef.recEnd.date \u003e\u003d rangeStart) {\n    switch (rTask.recDef.recType) {\n      case \"D\":\n        this.createTasks_DAY(rTask, rangeStart, rangeEnd);\n        break;\n      case \"W\":\n        this.createTasks_DoW(rTask, rangeStart, rangeEnd);\n        break;\n      case \"M\":\n        this.createTasks_DoM(rTask, rangeStart, rangeEnd);\n        break;\n      case \"Y\":\n        this.createTasks_DoY(rTask, rangeStart, rangeEnd);\n        break;\n      default:\n        logIt(LOG_EXTINFO, \u0027    \u003e\u003e unknown rectype\u0027, 1);\n    } \n  } else\n    logIt(LOG_EXTINFO, \u0027    \u003e\u003e out of range - skipping (VS) %s (VE) %s (RS) %s (RE) %s\u0027, rTask.recDef.recStart.date, rTask.recDef.recEnd.date, rangeStart, rangeEnd);\n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.saveAllTasks \u003d function(taskListId, rangeStart, rangeEnd) {\n  // method saves ALL tasks stored in array dayTasks into specified Google Apps task list\n  // the assumption is, that all irrelevant tasks have been removed from dayTasks array\n  \n  var y, m, d, i;\n  var task;\n  var count \u003d 0;\n  \n  // save/insert all tasks from dayTasks array to specified Google tasks list\n  for (m \u003d 0; m \u003c 12; m++){\n    logIt(LOG_EXTINFO, \u0027  \u003e Saving month %s\u0027, ((m+1)|0));     \n    for (d \u003d 1; d \u003c\u003d this.monthDays[m]; d++) {\n      if  (this.dayTasks[m][d].length \u003e 0) {\n        logIt(LOG_EXTINFO, \u0027  \u003e Day %s has %s tasks, %s\u0027, (d|0), this.dayTasks[m][d].length);\n        for (i \u003d 0; i \u003c this.dayTasks[m][d].length; i++) {\n          task \u003d safeTaskInsert(this.dayTasks[m][d][i], taskListId);\n          count++;\n          \n          if (task)\n            logIt(LOG_DEV, \u0027  \u003e Task saved: %s/%s %s ** %s\u0027, ((m+1)|0),(d|0),task.title, task.due);\n          else\n            logIt(LOG_CRITICAL, \u0027  \u003e Task NOT saved: %s/%s %s ** %s\u0027, ((m+1)|0),(d|0),task.title, task.due);\n          \n          Utilities.sleep(gTaskQTime); // artificial pause to manage API quota          \n        }\n      } else {\n        //logIt(LOG_DEV, \u0027  \u003e Nothing to save for %s\u0027, ((d)|0));\n      }\n      \n    }\n  }\n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.removeDuplicatesFromArray \u003d function(gTasks) {\n  // process all tasks in gTasks and remove all tasks from dayTasks array\n  // which have the same title and are due on the same date as any task from gTasks\n  \n  if (gTasks.length \u003e 0) {\n    for (var i \u003d 0; i \u003c gTasks.length; i++) {\n      var task \u003d gTasks[i];\n      var title \u003d gTasks[i].title;\n      var dt \u003d new Date(gTasks[i].due); //TIMEZONE?\n      if (dt) {\n        //logIt(LOG_DEV, \u0027  \u003e\u003e Removing duplicates for %s, %s, %s, %s\u0027, title, dt, gTasks[i].due,gTasks[i].deleted );\n        this.removeDuplicatesFromDayTasks(title, dt); //remove tasks from specific date\n      }\n    }\n  } else \n    logIt(LOG_EXTINFO, \u0027  \u003e\u003e OK, no tasks found for deduplication.\u0027);\n  \n}\n\n//--------------------------------------------------\nTaskCalendar.prototype.removeDuplicatesFromDayTasks \u003d function(title, dt) {\n  // remove all tasks having specified title from specified date\n  var m \u003d dt.getMonth();\n  var d \u003d dt.getDate();\n  var f \u003d 0;\n  var l \u003d this.dayTasks[m][d].length; // number of entries for that day before deduplication\n  \n  //logIt(LOG_DEV, \u0027  \u003e\u003e\u003e List for %s/%s contains %s entries\u0027,m+1,d,this.dayTasks[m][d].length);\n  //logIt(LOG_DEV, \u0027  \u003e\u003e\u003e Entries %s\u0027,this.dayTasks[m][d]);\n\n  if (this.dayTasks[m][d].length \u003e 0){\n    this.dayTasks[m][d] \u003d this.dayTasks[m][d].filter(function(itm){ return itm.title !\u003d title });\n    \n    if (l \u003e this.dayTasks[m][d].length)\n      logIt(LOG_DEV, \u0027  \u003e\u003e\u003e Removed %s duplicates from month/day %s/%s\u0027,l-this.dayTasks[m][d].length, m, d);    \n  }\n    \n  //for (var i\u003d0;i \u003c this.dayTasks[m][d].length; i++) {\n  //  if (this.dayTasks[m][d][i].title \u003d\u003d title){ // \u0026\u0026 (this.dayTasks[m][d][i].due2msec \u003d\u003d dt.getTime()) 3.9.15 removed condition for duetime\n  //    this.dayTasks[m][d].splice(i,1);\n  //    f++; //found +1\n  //  }\n  //}\n  \n  //logIt(LOG_DEV, \u0027  \u003e\u003e\u003e New entries %s\u0027,this.dayTasks[m][d]);\n  \n}"},{"id":"36060c97-8f94-44ba-8a5a-ce6dfdb6f0c7","name":"Props","type":"server_js","source":"// Copyright 2015 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//*********************************************************\n\n//---------------------------------------------------\n// Read user-level properties for this script from Google properties store\nfunction getUserProps() {\n  var p \u003d PropertiesService.getUserProperties();\n  var allOK \u003d true;\n  \n  var dftListPrefix \u003d \"~R\";  // default RTTL prefix\n  var dftRangeLength \u003d \"21\"; // 3 weeks by default\n  var dftDateFormat \u003d \"2\";   // US date format by default\n  var dftLogLevel \u003d \"03\";\n  var dftWeekStart \u003d \"S\";    // week starts on Sunday by default\n\n  // read user specific properties and initialize them if needed\n  var newp \u003d {\n    destTaskListId: p.getProperty(\"destTaskListId\") || (allOK \u003d false) || Tasks.Tasklists.list().items[0].id,\n    dateRangeLength: p.getProperty(\"dateRangeLength\") || (allOK \u003d false) || dftRangeLength,\n    recListPrefix: p.getProperty(\"recListPrefix\") ||  (allOK \u003d false) || dftListPrefix,\n    dateFormat: p.getProperty(\"dateFormat\") || (allOK \u003d false) || dftDateFormat, \n    logVerboseLevel: p.getProperty(\"logVerboseLevel\") || (allOK \u003d false) || dftLogLevel,\n    weekStartsOn: p.getProperty(\"weekStartsOn\") || (allOK \u003d false) || dftWeekStart,\n    ignoreDeleted: p.getProperty(\"ignoreDeleted\") || (allOK \u003d false) || \"Y\", \n    slideOverdue: p.getProperty(\"slideOverdue\") || (allOK \u003d false) || \"N\",\n    userTMZ: p.getProperty(\"userTMZ\") || (allOK \u003d false) || \"GMT\",\n    appendRecPattern: p.getProperty(\"appendRecPattern\") || (allOK \u003d false) || \"N\"\n  };\n  \n  logIt(LOG_DEV, \"Props loaded %s\",JSON.stringify(newp));\n  \n  // check values\n  if (newp.dateRangeLength.toString().search(/^(?:00|14|21|28|42|56)$/) \u003d\u003d -1) { \n    newp.dateRangeLength \u003d dftRangeLength;\n    logIt(LOG_DEV, \"Date range defaulted to %s\",newp.dateRangeLength);\n    allOK \u003d false;\n  }\n  \n  // handling of property value saved in old format\n  if (newp.dateFormat.toString().search(/^(?:1|2|3)$/) \u003d\u003d -1 ) { \n    newp.dateFormat \u003d dftDateFormat;\n    logIt(LOG_DEV, \"Date format defaulted to %s\",newp.dateFormat);\n    allOK \u003d false;\n  }\n  \n  // handling of property values saved in old format\n  if (newp.logVerboseLevel.toString().search(/^(?:01|02|03|04|10|20)$/) \u003d\u003d -1) {\n    newp.logVerboseLevel \u003d dftLogLevel;\n    logIt(LOG_DEV, \"Log verbose level defaulted to %s\",newp.logVerboseLevel);\n    allOK \u003d false;\n  }\n\n  //if not all properties were written in the property store\n  if (!allOK) {\n    p.setProperties(newp, true); //then write them and delete all other properties (if any)\n    logIt(LOG_CRITICAL,\u0027User properties re-initialized. %s\u0027, JSON.stringify(newp));\n  }\n  \n  return newp\n}  \n\n//--------------------------------------------------\n// Save user-level properties for this script to Google properties store\nfunction setUserProps(newp) {\n  var p \u003d PropertiesService.getUserProperties();\n  p.setProperties(newp);\n  logIt(LOG_INFO, \"User properties saved.\");\n  logIt(LOG_DEV, \"%s\",JSON.stringify(newp));\n  return newp\n}\n\n//--------------------------------------------------\n// Remove all user properties set by this app\nfunction removeUserProps() {\n  var p \u003d PropertiesService.getUserProperties();\n  p.deleteAllProperties();\n  logIt(LOG_INFO, \"User properties REMOVED.\");\n}\n\n"},{"id":"5f26ef71-6207-4e90-aacd-6024490203e7","name":"Triggers","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar triggerFunction \u003d \"processRecurrentLists\";  //trigger callback function name\n\n//---------------------------------------------\nfunction initTriggers (tmz) {\n  if (TESTMODE \u003d\u003d 1) \n    logIt(LOG_CRITICAL,\u0027TESTMODE - No trigger will be installed for timezone %s.\u0027,tmz);\n  else\n    //if list of project triggers does not contain any trigger having callback function name the same as we use\n    if (getTriggers() \u003d\u003d 0) {\n      logIt(LOG_CRITICAL,\u0027No trigger for \"\u0027+triggerFunction+\u0027\" found. Installing trigger for time zone %s.\u0027,tmz);\n      createTriggers(tmz);\n    }\n    else \n      logIt(LOG_DEV, \u0027Trigger installed already.\u0027);\n}\n\n//---------------------------------------------\nfunction getTriggers() {\n  return (ScriptApp.getProjectTriggers().filter(function(trg){ return trg.getHandlerFunction() \u003d\u003d triggerFunction }).length)\n}\n\n//---------------------------------------------\nfunction createTriggers(tmz) {\n  // Trigger running at 1am depending on timezone specified in settings\n  // If no timezone specified, script timezone is used (GMT)\n  ScriptApp.newTrigger(triggerFunction)\n      .timeBased()\n      .everyDays(1)\n      .inTimezone(tmz)\n      .atHour(1)\n      .create();\n      \n  // Adding extra run just in case first run failed because of API errors    \n  ScriptApp.newTrigger(triggerFunction)\n      .timeBased()\n      .everyDays(1)\n      .inTimezone(tmz)\n      .atHour(3)\n      .create();\n}\n\n//---------------------------------------------\nfunction getTriggerDetails () {\n  var cache \u003d CacheService.getUserCache();\n  return [cache.get(\"execStarted\"), cache.get(\"execFinished\")];\n}\n\n//---------------------------------------------\nfunction removeAllTriggers() {\n  var t \u003d ScriptApp.getProjectTriggers();\n  logIt(LOG_CRITICAL,\u0027Removing %s triggers for \"\u0027+triggerFunction+\u0027\"\u0027,t.length);\n  for (var i\u003d0;i\u003ct.length;i++){\n    ScriptApp.deleteTrigger(t[i]);\n  };\n  return t.length;\n}"},{"id":"b57e59f8-f584-47a2-a125-729d6bcfa5eb","name":"RecordParser","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//*********************************************************\n\nfunction Record_Parser() {\n\n  this.locFmt \u003d new LocaleFmt();\n\n  this.PARSE_STOP \u003d 0;\n  this.PARSE_OK \u003d 1;\n  this.PARSE_SYNTAX_ERROR \u003d 10;\n  this.PARSE_VALUE_ERROR \u003d 11;\n\n  // small local helper function used to make syntax case insensitive\n  upcase \u003d function(x){return x.toLocaleUpperCase()};\n  \n  // helper for putting zeroes in\n  pad \u003d function(n,m) {return ((m\u003e1)\u0026\u0026(n\u003c(10*(m-1)))) ? \u00270\u0027+pad(n,m-1) : n}\n  \n\n  // small helper object used to pass error information\n  this.err \u003d {\n    code:-1,\n    text:\"\",\n    reset:function(){this.code \u003d 1; this.text \u003d \"\"},\n    set:function(a,b){this.code \u003d a; this.text \u003d b}\n  };\n  \n  this.err.reset(); //and reset any error from previous parsing\n\n  // syntax definition is in following form [\u003cmatch-pattern\u003e, prepare, validate]\n  //    \u003cmatch-pattern\u003e - token on the top of the input buffer is matched with this RegExp pattern - if not matching then syntax error\n  //    prepare - optional prepare function is called prior to pattern-matching and can be used to tweak input (e.g. changing all letters to upper-case ones, so matching will be case insensitive)\n  //    validate - validation function is called after match passed successfully - it can be used to validate data entered (e.g month does have less than 31 days) and to store data into DCX (data-context object)\n  this.sx_recordId_RGT \u003d [ /\\*E/, upcase, function(x, dcx){  this.syntax.push([dcx, this.sx_recType]); this.syntax.push([dcx, this.sx_frequency]); return true} ];\n  this.sx_frequency \u003d [/^[0-9]+$/, , this.proc_frequency];\n  this.sx_recType \u003d [/^[\u0027D\u0027,\u0027W\u0027,\u0027M\u0027,\u0027Y\u0027]$/, , this.proc_recType];\n  this.sx_DoW \u003d [/^[1-7]{1,7}$/, , this.proc_days_of_week];\n  this.sx_DoM \u003d [/^[0-9]{1,2}$/, , this.proc_day_of_month];\n  this.sx_MD \u003d [/^[0-9]{1,2}\\/[0-9]{1,2}$/, , this.proc_month_and_day];\n  this.sx_FullDate \u003d [/^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$/, , this.proc_date];\n  this.sx_recStart \u003d [/^S$/, upcase, function(x, dcx) {this.syntax.push([dcx.recStart, this.sx_FullDate]); return true}];\n  this.sx_recEnd \u003d [/^E$/, upcase, function(x, dcx) {this.syntax.push([dcx.recEnd, this.sx_FullDate]); return true}];\n\n  // following tokens are optional and parser is trying to match them after syntax stack is empty and input buffer still contains some tokens\n  // I admit it is not elegant solution - maybe I\u0027ll refactor it later...\n  this.optional \u003d [this.sx_recStart, this.sx_recEnd];\n\n  //*E 1 D S 2015-11-02 E 2016-07-26\n  //*E 1 W 12567 S 2015-11-02 E 2016-07-26\n  //*E 1 M 12 S 2015-11-02 E 2016-07-26\n  //*E 1 Y 12/27 S 2015-11-02 E 2016-07-26\n\n  this.aBuffer \u003d []; //buffer containing input tokens - it will be reversed to simulate a stack\n  this.syntax \u003d [];  //stack containing pairs defining [data-context, syntax] - it might be dynamically modified by tokens being processed\n  \n}\n\nRecord_Parser.prototype.setWeekStart \u003d function (ws) {\n  this.locFmt.setWeekStart(ws);\n}\n\nRecord_Parser.prototype.setDateFmt \u003d function (df) {\n// set date format and according syntax validation regExps\n\n  this.locFmt.setDateFmt(df);\n  this.sx_MD[0] \u003d this.locFmt.sxMD;\n  this.sx_FullDate[0] \u003d this.locFmt.sxFullDate;\n}\n\n\nRecord_Parser.prototype.proc_day_of_month \u003d function(x, dcx) {\n// validation function for \"day of month\"\n// right now hardcoded to 31 days (even for February)\n// TODO: differentiate months \u0026 leap years\n\n  x \u003d parseInt(x,10);\n  dcx.day \u003d -1;\n  if (x \u003c 1 || x \u003e 31) {\n    this.err.set(this.PARSE_VALUE_ERROR,\"Wrong day of month specified: \"+x);\n  } else\n    dcx.day \u003d x;\n\n  return (this.PARSE_OK \u003d\u003d this.err.code);\n};\n\n\nRecord_Parser.prototype.proc_frequency \u003d function(x, dcx) {\n// validation function for ocurrence frequency\n  \n  x \u003d parseInt(x,10);\n  dcx.frequency \u003d x;\n  if (x\u003c\u003d0) {\n    this.err.set(this.PARSE_VALUE_ERROR,\"Wrong frequency specified: \"+x);\n  }\n\n  return (this.PARSE_OK \u003d\u003d this.err.code);\n};\n\n\nRecord_Parser.prototype.proc_recType \u003d function(x, dcx){\n// validation function for recurrency types\n  \n  var res \u003d true;\n  dcx.recType \u003d x.toLocaleUpperCase();\n  switch (dcx.recType) {\n    case \"D\": break;\n    case \"W\": this.syntax.push([dcx.weekly,this.sx_DoW]); break;\n    case \"M\": this.syntax.push([dcx.monthly, this.sx_DoM]); break;\n    case \"Y\": this.syntax.push([dcx.yearly, this.sx_MD]); break;\n    default: res \u003d false;\n  }\n  return res;\n};\n\nRecord_Parser.prototype.proc_month_and_day \u003d function(x, dcx){\n// validation function for month/day pairs (no year specified)\n  \n  var a \u003d x.split(this.locFmt.sepMD);\n  \n  switch (this.locFmt.dateType) {\n    case \"3\":\n      dcx.month \u003d parseInt(a[1],10)-1; //decrease by 1 as months in Javascript are 0-11\n      dcx.day \u003d parseInt(a[0],10);\n      break;\n    default:\n      dcx.month \u003d parseInt(a[0],10)-1; //decrease by 1 as months in Javascript are 0-11\n      dcx.day \u003d parseInt(a[1],10);\n      break;\n  }\n\n  if (dcx.month \u003c 0 || dcx.month \u003e 11)\n    this.err.set(this.PARSE_VALUE_ERROR, \"Wrong month specified in: \"+x+\" expected format: \"+this.locFmt.fmtMD);\n\n  if (dcx.day \u003c 1 || dcx.day \u003e 31)\n    this.err.set (this.PARSE_VALUE_ERROR, \"Wrong day specified in: \"+x+\" expected format: \"+this.locFmt.fmtMD);\n\n  return (this.PARSE_OK \u003d\u003d this.err.code);\n\n};\n\nRecord_Parser.prototype.proc_days_of_week \u003d function(x, dcx){\n// converting string representing days of week, e.g \"1256\" into array of boolean values\n\n  for (var i\u003d0; i\u003cx.length; i++) \n    dcx.days_of_week[parseInt(x[i])-1] \u003d true;\n    \n  //logIt(LOG_DEV, \u0027    \u003e\u003e DoW#1 %s,%s \u0027, this.locFmt.weekStartsOn, dcx.days_of_week);\n  \n  //if week starts on Monday, then 1 \u003d Monday, so we need to correct array values so [0] is always Sunday\n  if (this.locFmt.weekStartsOn \u003d\u003d \"M\") {  //if week starts on Monday, \n    dcx.days_of_week.splice(0,0,dcx.days_of_week[6]);  //move 7th item to the head of array\n    dcx.days_of_week.pop(); // and remove unnecessary 8th element\n  }\n  \n  //logIt(LOG_DEV, \u0027    \u003e\u003e DoW#2 %s\u0027, dcx.days_of_week);\n  \n  return true; //no issues expected\n};\n\nRecord_Parser.prototype.proc_date \u003d function(x, dcx){\n// validation function for full dates \n\n  var a;\n  var sep \u003d this.locFmt.sepFullDate;\n  var y, m, d;\n  \n  var a \u003d x.split(sep);\n  \n  //logIt(LOG_DEV, \u0027    \u003e\u003e proc_date#1 \"%s\", \"%s\"\u0027, this.locFmt.dateType, sep);\n  //logIt(LOG_DEV, \u0027    \u003e\u003e proc_date#2 %s\u0027, a);\n  \n  switch (this.locFmt.dateType) {\n    case \"2\": //US fmt MM/DD/YYYY\n      y \u003d parseInt(a[2],10);\n      m \u003d parseInt(a[0],10);\n      d \u003d parseInt(a[1],10);\n      break;\n    case \"3\": //GB fmt DD/MM/YYYY\n      y \u003d parseInt(a[2],10);\n      m \u003d parseInt(a[1],10);\n      d \u003d parseInt(a[0],10);\n      break;\n    case \"1\": //old fmt YYYY-MM-DD\n      y \u003d parseInt(a[0],10);\n      m \u003d parseInt(a[1],10);\n      d \u003d parseInt(a[2],10);\n      break;\n    default:\n      this.err.set(this.PARSE_VALUE_ERROR,\"Unknown date format \"+ this.locFmt.dateType);\n  }\n  \n  //logIt(LOG_DEV, \u0027    \u003e\u003e proc_date#3 %s\u0027, [y,m,d]);\n  \n  if (y \u003e 0 \u0026\u0026 m \u003e 0 \u0026\u0026 m \u003c 13 \u0026\u0026 d \u003e 0 \u0026\u0026 d \u003c 32)\n    dcx.date \u003d new Date(y,m-1,d); //decrease month by 1 as months in JS are 0-11\n  else\n    this.err.set(this.PARSE_VALUE_ERROR, \"Wrong date specified: \"+x+\" expected format: \"+this.locFmt.fmtFullDate+\" for type \"+this.locFmt.dateType+\" parsed \"+[y,m,d]);\n\n  return (this.PARSE_OK \u003d\u003d this.err.code);\n\n};\n\nRecord_Parser.prototype.doParse \u003d function(input_line, dcx){\n// method used to start parsing\n//   input_line - string containing input to be parsed\n//   dcx - data context object - object to be used to store parsed values\n// for now syntaxt is initialized for recurrency patterns only\n// TODO: implement record type recognition (definitely not needed for recurrent tasks :-)\n  \n  this.aBuffer \u003d [];\n  this.syntax \u003d [];\n  \n  // empty input - nothing to do\n  if (0 \u003d\u003d input_line.trim().length) return true;\n\n  //logIt(LOG_DEV, \u0027    \u003e\u003e p#1 buffer: %s\u0027, this.aBuffer);\n  //logIt(LOG_DEV, \u0027    \u003e\u003e p#1 syntax: %s\u0027, this.syntax);\n\n  // split string buffer into pieces and reverse it so push/pop can be used\n  // before splitting remove unnecessary white spaces\n  this.aBuffer \u003d input_line.trim().replace(/\\s\\s/g,\" \").split(/[\\s]/).reverse();\n\n  // for now hardcoded so the first token should be RGT record prefix\n  this.syntax.push([dcx, this.sx_recordId_RGT ]);\n\n  //logIt(LOG_DEV, \u0027    \u003e\u003e p#2 buffer: %s\u0027, this.aBuffer);\n  //logIt(LOG_DEV, \u0027    \u003e\u003e p#2 syntax: %s\u0027, this.syntax);\n\n\n  this.doParse_prim(dcx);\n};\n\nRecord_Parser.prototype.doParse_prim \u003d function(mdcx){\n// method used to actually parse input data records\n//   mdcx - master data context - data context to be used if not specified otherwise\n\n  \n  var b;  // buffer entry\n  var ss; // stack entry\n  var dcx; // local data context \n  var s;\n  var i;  // iterator :-)\n\n\n  while (this.PARSE_OK \u003d\u003d this.err.code \u0026\u0026 this.aBuffer.length + this.syntax.length \u003e 0) {\n\n    while (this.aBuffer.length \u003e 0 \u0026\u0026 this.syntax.length !\u003d 0){\n      ss \u003d this.syntax.pop();\n      dcx \u003d ss[0];\n      s \u003d ss[1];\n      b \u003d this.aBuffer.pop();\n      \n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#1 status: %s, %s\u0027, this.err.code, this.err.text);      \n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#1 buffer: %s\u0027, this.aBuffer);\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#1 syntax: %s\u0027, this.syntax);\n\n      // if prep function is defined, run it\n      if (s[1])\n        b \u003d s[1].call(this, b);\n\n      // check syntax\n      if (b.search(s[0]) \u003c 0)\n        this.err.set(this.PARSE_SYNTAX_ERROR,\"Syntax error: \"+b);\n      \n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#2 status: %s, %s\u0027, this.err.code, this.err.text);\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#2 buffer: %s\u0027, this.aBuffer);\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#2 syntax: %s\u0027, this.syntax);\n\n      // process \u0026 validate data\n      if (!s[2].call(this, b, dcx)){\n        //if called validation failed, but did not set error code, then set it manually\n        if (this.PARSE_OK \u003d\u003d this.err.code)\n          this.err.set(this.PARSE_VALUE_ERROR, \"Data error: \"+b);\n      }\n\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#3 status: %s, %s\u0027, this.err.code, this.err.text);\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#3 buffer: %s\u0027, this.aBuffer);\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#3 syntax: %s\u0027, this.syntax);\n\n    }\n\n    // empty input buffer, but syntax is expecting something\n    if (this.aBuffer.length \u003d\u003d 0 \u0026\u0026 this.syntax.length !\u003d 0){\n      this.err.set(this.PARSE_SYNTAX_ERROR,\"Attributes missing.\");\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#4 buffer: %s\u0027, this.aBuffer);\n      //logIt(LOG_DEV, \u0027    \u003e\u003e parse#4 syntax: %s\u0027, this.syntax);\n    }\n\n    // if input buffer is not empty, but no syntax element left try optional attributes\n    if (this.aBuffer.length !\u003d 0 \u0026\u0026 this.syntax.length \u003d\u003d 0) {\n      b \u003d this.aBuffer[this.aBuffer.length-1];\n      //logIt(LOG_DEV, \u0027    \u003e\u003e trying optional parameters for input %s \u0027, this.aBuffer);\n      i \u003d 0;\n      do {\n        if (b.search(this.optional[i][0]) \u003d\u003d 0) {       // if optional matches\n          this.syntax.push([mdcx, this.optional[i]]);   // push its syntax\n          i \u003d this.optional.length;                     // and we are done, for now\n        }\n      } while (++i \u003c this.optional.length);\n    }\n\n    // if not even optional attributes matched, yell error\n    if (this.aBuffer.length !\u003d 0 \u0026\u0026 this.syntax.length \u003d\u003d 0)\n      this.err.set(this.PARSE_SYNTAX_ERROR,\"Too many attributes.\");\n\n  }\n\n  return (this.PARSE_OK \u003d\u003d this.err.code);\n\n};\n"},{"id":"d95b1766-7fec-46bb-a926-f51ee6806483","name":"RecordDef","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction Record_RGT() {\n  this.signature \u003d \"*E\"\n  this.recType \u003d \"#\";\n  this.frequency \u003d -1;\n  this.weekly \u003d {days_of_week:[false, false, false, false, false, false, false]}; //[0] \u003d Sunday, ... [6] \u003d Saturday\n  this.monthly \u003d {day:-1};\n  this.yearly \u003d {month:-1, day:-1};\n  this.recStart \u003d {date: new Date(2000, 0, 1)};\n  //this.recStart \u003d new Date(2000, 0, 1);\n  this.recEnd \u003d {date: new Date(2999, 11, 31)};\n  //this.recEnd \u003d new Date(2999, 11, 31);\n  \n  this.locFmt \u003d new LocaleFmt();\n  \n}\n\n//----------------------------------------------------\nRecord_RGT.prototype.setWeekStart \u003d function (ws) {\n  this.locFmt.setWeekStart(ws);\n}\n\n//----------------------------------------------------\nRecord_RGT.prototype.setDateFmt \u003d function (f) {\n  this.locFmt.setDateFmt(f);\n}\n\n//----------------------------------------------------\nRecord_RGT.prototype.toString \u003d function (){\n\n  var st \u003d new Date(2000,0,1);\n  var end \u003d new Date(2999,11,31);\n  var dow \u003d this.weekly.days_of_week.slice(); // get a copy of array\n  \n  if (\"M\" \u003d\u003d this.locFmt.weekStartsOn) { // if week starts on Monday\n    dow[7] \u003d dow[0]; //move Sunday to the end\n    dow.shift(0); //remove Sunday from the head of array making Monday the head\n  }\n    \n  \n  var s \u003d this.signature + \" \" + this.frequency + \" \" + this.recType + \" \"\n  \n  switch (this.recType) {\n    case \"W\": \n      dow.forEach(function(item, i){return s +\u003d (item ? (i+1):\"\")}); //need to us modified week array\n      break;\n    case \"M\":\n      s +\u003d this.monthly.day|0;\n      break;\n    case \"Y\":\n      s +\u003d this.locFmt.getMDStr(new Date(2500,this.yearly.month, this.yearly.day));\n      break;\n  }\n  \n  s +\u003d \" \";\n  \n  if (this.recStart.date !\u003d null) \n    s +\u003d (\"S \"+this.locFmt.getFullDateStr(this.recStart.date)+\" \");\n\n  \n  if (this.recEnd.date !\u003d null) \n    s +\u003d (\"E \"+this.locFmt.getFullDateStr(this.recEnd.date)+\" \");\n    \n  return s;\n\n}\n"},{"id":"eebdf84d-8514-42c2-aea4-0d17296809b3","name":"LogIt","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//*********************************************************\n\nLOG_CRITICAL \u003d \"01\";\nLOG_WARN \u003d \"02\";\nLOG_INFO \u003d \"03\";\nLOG_EXTINFO \u003d \"04\";\nLOG_DEV \u003d \"10\";\nLOG_TRACE \u003d \"20\";\n\nvar logLevel \u003d LOG_WARN;\nvar logs \u003d [\"execLog1\", \"execLog2\", \"execLog3\", \"execLog4\", \"execLog5\"];\n\nfunction logIt(l,fmt,v1, v2, v3, v4, v5, v6) {\n  if (l \u003e logLevel) return;\n  \n  var prefix \u003d \"??? \";\n  \n  switch (l){\n    case LOG_CRITICAL: prefix \u003d \"[C] \";break;\n    case LOG_WARN: prefix \u003d \"[W] \"; break;\n    case LOG_INFO: prefix \u003d \"[I] \"; break;\n    case LOG_EXTINFO: prefix \u003d \"[O] \"; break;\n    case LOG_DEV: prefix \u003d \"[D] \"; break;\n    case LOG_TRACE: prefix \u003d \"[T] \"; break;\n  }\n  \n  Logger.log(prefix+fmt+\"\u003cbr\u003e\", v1, v2, v3, v4, v5, v6);\n}\n\nfunction getLog(){\n  var body \u003d \"\";\n  var cache \u003d CacheService.getUserCache();\n  logs.forEach(function(itm, idx){var c \u003d cache.get(itm); c !\u003d null ? body +\u003d c : body+\u003d\"\";});\n  return \"\u003ch3\u003e*** Log beginning ***\u003c/h3\u003e\" + body + \"\u003ch3\u003e*** Log end ***\u003c/h3\u003e\";\n}\n\nfunction saveLog(cache, log){\n  var i \u003d 0;\n  \n  cache.removeAll(logs)\n  while (log.length \u003e 0 || i\u003e4){\n    cache.put(logs[i], log.length\u003e0 ? log.substr(0,80000) : \"\");\n    log \u003d log.substr(80000);\n    i++\n  }\n}"},{"id":"23356e85-4aee-47bb-b0cd-1ef15b1127cf","name":"scripts-manage","type":"html","source":"\u003cscript\u003e\n\n// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction initManage(){\n\n  // reload tasks on change of the task list\n  $(\u0027#tasklist\u0027).on(\u0027change\u0027, loadTasks);\n  \n  // modify recurrence builder dialog on recurrence type change\n  $(\u0027#recType\u0027).on(\u0027change\u0027, changeRecType);\n  \n  // initialize datepicker objects\n  $(\"#recStartDate\").datepicker();\n  $(\"#recEndDate\").datepicker();\n  $(\"#recDialog\").dialog({\n      autoOpen: false,\n      resizable: false,\n      dialogClass:\"recDialog\",\n      height:450,\n      width:440,\n      modal: true,\n      buttons: {\n        Apply: function() {\n          commitUpdatedTask();\n          $( this ).dialog( \"close\" );\n        },\n        Cancel: function() {\n          $( this ).dialog( \"close\" );\n        }\n      }\n    });\n  $(\"#recDialog\").dialog(\"close\");\n  \n  // set first day of week \n  $(\".datepick\").datepicker( \"option\", \"firstDay\", $(\u0027#weekStart\u0027).val() \u003d\u003d \"S\" ? 0 : 1 );\n  \n  // set date format\n  var fmt\u003d\"yy-mm-dd\";\n  switch ($(\u0027#dateFmt\u0027).val()){\n    case \"2\": fmt\u003d\"mm/dd/yy\"; break;\n    case \"3\": fmt\u003d\"dd/mm/yy\"; break;\n  };\n  $(\".datepick\").datepicker( \"option\", \"dateFormat\", fmt);\n  \n  $(\"#clrRecStart\").on(\"click\",$(\"#recStartDate\"), clearField);\n  $(\"#clrRecEnd\").on(\"click\",$(\"#recEndDate\"), clearField); \n  \n  // initialize dropdown values\n  init31($(\u0027#recFreq\u0027));\n  init31($(\u0027#repOnDoM\u0027));\n  initMonths($(\"#repOnMoY\"));\n   \n}\n\n//---------------------------------------------------------------------------------\n\nfunction initMonths(select){\n  var months \u003d [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n  select.empty();\n  for (var i\u003d0;i\u003c12;i++){\n    var option \u003d $(\u0027\u003coption\u003e\u0027)\n        .attr(\u0027value\u0027, i)\n        .text(months[i]);\n    select.append(option);\n  };\n}\n\n//---------------------------------------------------------------------------------\n\nfunction init31(select){\n  select.empty();\n  for (var i\u003d1;i\u003c32;i++){\n    var option \u003d $(\u0027\u003coption\u003e\u0027)\n        .attr(\u0027value\u0027, i)\n        .text(i);\n    select.append(option);\n  };\n}\n\n//---------------------------------------------------------------------------------\n/**\n * Show the returned task lists in the dropdown box.\n * @param {Array.\u003cObject\u003e} taskLists The task lists to show.\n */\nfunction showTaskLists_Manage(taskLists) {\n  var select \u003d $(\u0027#tasklist\u0027);\n  var prefix \u003d $(\u0027#rttl-prefix\u0027).val();\n  select.empty();\n  $(\u0027#noTaskListsPanel\u0027).hide();\n  \n  taskLists \u003d taskLists.filter(function(i){return i.name.indexOf(prefix) \u003d\u003d 0}); //only RTTL lists will be displayed\n  \n  taskLists.forEach(function(taskList) {\n    var option \u003d $(\u0027\u003coption\u003e\u0027)\n      .attr(\u0027value\u0027, taskList.id)\n      .text(taskList.name);\n    select.append(option);\n  });\n  \n  if (taskLists.length \u003e 0)\n    loadTasks();\n  else {\n    $(\u0027#noTaskListsPanel\u0027).show();\n    showTasks([]);\n  }\n\n}\n\n//---------------------------------------------------------------------------------\n/**\n * Load the tasks in the currently selected task list.\n */\nfunction loadTasks() {\n  $(\u0027#tasks\u0027).text(\u0027Loading...\u0027);\n  var taskListId \u003d $(\u0027#tasklist\u0027).val();\n  google.script.run.withSuccessHandler(showTasks)\n      .getProcessedTasks(taskListId);\n}\n\n//---------------------------------------------------------------------------------\n/**\n * Show the returned tasks on the page.\n * @param {Array.\u003cObject\u003e} tasks The tasks to show.\n */\n\nfunction showTasks(tasks) {\n  var list \u003d $(\u0027#tasks\u0027).empty();\n  if (tasks.length \u003e 10) //should the task list be too long, let there be two \"buttons\" for creating new task\n    $(\u0027#tasks\u0027).append($(\u0027\u003ca class\u003d\"creNewTask\" href\u003d\"\"\u003e\u0027).text(\"\u003c\u003c Click to add new task \u003e\u003e\"));\n  if (tasks.length \u003e 0) {\n    tasks.forEach(function(task) {\n      var tr \u003d $(\u0027\u003ctr\u003e\u0027);\n      var td \u003d $(\u0027\u003ctd  class\u003d\"taskRow\"\u003e\u0027);\n      \n      // --- task title\n      var c \u003d $(\u0027\u003cdiv class\u003d\"taskItem\" style\u003d\"width:50%\"\u003e\u0027).text(task.title);\n      td.append(c);\n      \n      // --- recurrence pattern\n      c \u003d $(\u0027\u003cdiv class\u003d\"taskItem\" style\u003d\"width:45%\"\u003e\u0027);\n      \n      if (task.recPattern \u003d\u003d null)\n        var linktxt \u003d \"\u003c\u003c click to define \u003e\u003e\";\n      else\n        linktxt \u003d task.recPattern;\n        \n      c.append($(\u0027\u003ca id\u003d\"tid-\u0027+task.id+\u0027\" href\u003d\"\"\u003e\u0027).text(linktxt));\n      \n      td.append(c);\n      \n      // --- icon delete\n      c \u003d $(\u0027\u003cdiv class\u003d\"taskItem\" style\u003d\"width:5%\"\u003e\u0027);\n      c.append($(\u0027\u003ca href\u003d\"\"\u003e\u0027).append($(\u0027\u003cimg src\u003d\"https://sites.google.com/site/recgtasks/images/icon-delete-20px-grey.png\" alt\u003d\"del\" class\u003d\"inline-icon icon-delete\" id\u003d\"del-\u0027+task.id+\u0027\" \u003e\u0027)));\n     \n      td.append(c);\n      \n      tr.append(td);\n      list.append(tr);\n      $(\"#tid-\"+task.id).on(\"click\",task,editTask);\n    });\n  } else {\n    list.text(\u0027No tasks\u0027);\n  }\n  $(\u0027#tasks\u0027).append($(\u0027\u003ca class\u003d\"creNewTask\" href\u003d\"\"\u003e\u0027).text(\"\u003c\u003c Click to add new task \u003e\u003e\"));\n  // assign event for creating new task\n  $(\u0027.creNewTask\u0027).on(\u0027click\u0027, {title:\"** New task **\"}, createNewTask);\n  $(\u0027.icon-delete\u0027).on(\u0027click\u0027, deleteTask);\n  \n}\n\n//---------------------------------------------------------------------------------\nfunction changeRecType(){\n  var rt \u003d $(\u0027#recType\u0027).val();\n  var htmlSelectMonth \u003d \u0027\u003cselect id\u003d\"recMoY\"\u003e\u003c/select\u003e\u0027;\n  \n  $(\"#rowDoW\").hide();\n  $(\"#rowDoM\").hide();\n  $(\"#txtMoY\").hide();\n  $(\"#repOnMoY\").hide();\n  switch (rt) {\n    case \"D\":\n      $(\"#recFreqWord\").text(\"days\");\n      break;\n    case \"W\":\n      $(\"#recFreqWord\").text(\"weeks\");\n      $(\"#rowDoW\").show();\n      break;\n    case \"M\":\n      $(\"#recFreqWord\").text(\"months\");\n      $(\"#rowDoM\").show();\n      $(\"#txtMoY\").show();\n      break;\n    case \"Y\":\n      $(\"#recFreqWord\").text(\"years\");\n      $(\"#rowDoM\").show();\n      $(\"#repOnMoY\").show();\n      break;\n  }\n\n}\n\n//---------------------------------------------------------------------------------\nfunction editTask(e){\n\n  setTaskDefaults();\n\n  console.log(e.data);\n\n  // initialize dialog fields\n  $(\"#recTT\").val(e.data.title);\n  if (e.data.notes) {\n    e.data.notes \u003d e.data.notes.replace(/^\\*E.*$/mg,\"\");\n    e.data.notes \u003d e.data.notes.replace(/\\n\\n/g,\"\\n\");\n    $(\"#recTNotes\").val(e.data.notes);\n  }  \n  $(\"#recTid\").val(e.data.id);\n  \n  \n  if (e.data.recPattern){\n    $(\"#recType\").val(e.data.recType);\n    $(\"#recFreq\").val(e.data.recFreq);\n    e.data.recW_dow.forEach(function(i,idx){ $(\"#recW\"+idx).prop(\u0027checked\u0027, i); });\n    $(\"#repOnDoM\").val(e.data.recM_day);\n    if (e.data.recType \u003d\u003d \"Y\") $(\"#repOnDoM\").val(e.data.recY_day);\n    $(\"#repOnMoY\").val(e.data.recY_month);\n    \n    if (e.data.recStart) $(\"#recStartDate\").datepicker(\"setDate\", new Date(e.data.recStart));\n    if (e.data.recEnd) $(\"#recEndDate\").datepicker(\"setDate\", new Date(e.data.recEnd));\n      \n  } \n  \n  changeRecType();\n  \n  $(\"#recDialog\").dialog(\"open\");\n  \n  return false; //has to return false to avoid opening link in a new window \n}\n\n//---------------------------------------------------------------------------------\n\nfunction setTaskDefaults(){\n  $(\"#recType\").val(\"D\");\n  $(\"#recFreq\").val(1);\n\n  // initialize day of week selection with the current day\n  var dow \u003d (new Date()).getDay();\n  dow \u003d \"#recW\"+dow;\n  $(dow).prop(\u0027checked\u0027, true);\n  \n  //initialize day of month selection with the current day\n  var dom \u003d (new Date()).getDate();\n  $(\"#repOnDoM\").val(dom);\n  \n  //initialize month of year selection with the current month\n  var moy \u003d (new Date()).getMonth();\n  $(\"#repOnMoY\").val(moy);\n  \n  // insert Sunday checkbox before Monday or after Saturday based on user settings\n  var strSunday \u003d \u0027\u003cinput type\u003d\"checkbox\" id\u003d\"recW0\" title\u003d\"Sunday\"\u003eS\u0027;\n  if ($(\u0027#weekStart\u0027).val() \u003d\u003d \"S\")\n    $(\"#Sun0\").html(strSunday)\n  else\n    $(\"#Sun7\").html(strSunday);\n  \n  // repeating tasks not having start date will not repeat correctly if frequency is higher than 1\n  // set default start date to today\n  $(\"#recStartDate\").datepicker(\"setDate\", new Date());\n  $(\"#recEndDate\").datepicker(\"setDate\", \"\");\n\n\n}\n\n//---------------------------------------------------------------------------------\nfunction commitUpdatedTask(){\n  var t \u003d {};\n  \n  t.title \u003d $(\"#recTT\").val();\n  t.notes \u003d $(\"#recTNotes\").val();\n  t.id \u003d $(\"#recTid\").val();\n  t.recType \u003d $(\"#recType\").val();\n  t.recFreq \u003d $(\"#recFreq\").val();\n  \n  t.recW_dow \u003d [];\n  for (var i \u003d 0; i\u003c7; i++){\n    t.recW_dow.push($(\"#recW\"+i).prop(\u0027checked\u0027));\n  };\n  \n  t.recM_day \u003d $(\"#repOnDoM\").val();\n  t.recY_day \u003d $(\"#repOnDoM\").val(); //they use the same input field\n  t.recY_month \u003d $(\"#repOnMoY\").val();\n  \n  // dates are sent to server as in UTC timezone - Google Tasks due date does not contain \n  // timezone and everything is considered to be UTC\n  t.recStart_ms \u003d $(\"#recStartDate\").datepicker(\"getDate\");\n  if (t.recStart_ms) t.recStart_ms \u003d date2rfc3339(t.recStart_ms, \"Z\");\n  t.recEnd_ms \u003d $(\"#recEndDate\").datepicker(\"getDate\");\n  if (t.recEnd_ms) t.recEnd_ms \u003d date2rfc3339(t.recEnd_ms, \"Z\");\n\n  console.log(t);\n\n  google.script.run.withSuccessHandler(loadTasks)\n      .updateRecTask($(\u0027#tasklist\u0027).val(), t);\n      \n  return false; //has to return false to avoid opening link in a new window \n\n}\n\n//---------------------------------------------------------------------------------\n\nfunction createNewTask(e){\n  \n  google.script.run.withSuccessHandler(loadTasks)\n      .createTask($(\u0027#tasklist\u0027).val(), e.data.title, e.data.notes);\n  \n  return false; //has to return false to avoid opening link in a new window \n\n}\n\n//---------------------------------------------------------------------------------\n\nfunction clearField(e){\n  $(e.data.selector).val(null);\n}\n\n//---------------------------------------------------------------------------------\n\nfunction deleteTask(e){\n  console.log(\"delete task id #\"+e.target.id.substr(4));\n  google.script.run.withSuccessHandler(loadTasks)\n    .deleteTask($(\u0027#tasklist\u0027).val(), e.target.id.substr(4))\n    \n  return false;\n}\n\n\u003c/script\u003e"},{"id":"a1f6c327-5a40-4a5c-851d-405eb9af0d4f","name":"ManageTasks","type":"server_js","source":"// Copyright (c) 2015-2018 Jozef Sovcik. All Rights Reserved.\n//\n// Portions Copyright 2013 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//---------------------------------------------------------------------------------\n/**\n * Returns the ID and name of every task list in the user\u0027s account.\n * @return {Array.\u003cObject\u003e} The task list data.\n */\nfunction getTaskLists() {\n  \n  var taskLists \u003d Tasks.Tasklists.list().getItems();\n  if (!taskLists) {\n    return [];\n  }\n  return taskLists.map(function(taskList) {\n    return {\n      id: taskList.getId(),\n      name: taskList.getTitle()\n    };\n  });\n}\n\n//---------------------------------------------------------------------------------\n// primitive function wrapping task resource pagination\n// pagination implemented because of API bug causing no greater number than 100 is \n// accepted https://code.google.com/a/google.com/p/apps-api-issues/issues/detail?id\u003d3641\nfunction getTasks_paged(tlid, params){\n\n  var p \u003d JSON.parse(JSON.stringify(params)); //clone object\n  if (\"fields\" in p \u0026\u0026 p.fields.length \u003e 0 \u0026\u0026 p.fields.indexOf(\"nextPageToken\") \u003c 0) // add field nextPageToken only if no field specified or missing\n    p.fields +\u003d \",nextPageToken\";\n    \n  var tasks;\n  \n  tasks \u003d safeTaskListRead(tlid,p);\n  \n  var t \u003d [];\n  \n  if (\"items\" in tasks)\n    t \u003d t.concat(tasks.items);\n  \n  //while there is a next page\n  while (\"nextPageToken\" in tasks) {\n    p.pageToken \u003d tasks.nextPageToken; // page to read is the next page...\n    Utilities.sleep(gTaskQTime); // artificial pause to manage API quota\n    \n    tasks \u003d safeTaskListRead(tlid,p);\n        \n    if (\"items\" in tasks)\n      t \u003d t.concat(tasks.items);\n  }\n  \n  return t;\n}\n\n\n//---------------------------------------------------------------------------------\n/**\n * Returns information about the tasks within a given task list.\n */\nfunction getProcessedTasks(tlid) {\n\n  var tasks\n  var tasks_proc \u003d [];\n  var tproc \u003d {};\n  \n  // get all tasks\n  var params \u003d {fields:\"items(id,title,notes)\"};\n  tasks \u003d getTasks_paged(tlid, params);\n  \n  // add recurrence pattern\n  var re \u003d /^\\*E.*$/m; //\"m\" stands for multiline flag ^,$ are then limited to a single line\n  for (var i\u003d0; i \u003c tasks.length; i++){\n    var m \u003d re.exec(tasks[i].notes); // returns an array of matches\n    tasks[i].recPattern \u003d m !\u003d null ? m[0] : \"\";\n  }\n  \n  // add parsed recurrence pattern\n  var up \u003d getUserProps();  \n  var parser \u003d new Record_Parser();\n  parser.setWeekStart(up.weekStartsOn);\n  parser.setDateFmt(up.dateFormat);\n  for (var i\u003d0; i \u003c tasks.length; i++){\n    parser.err.reset();\n    tasks[i].recDef \u003d new Record_RGT();\n    tasks[i].recDef.setWeekStart(up.weekStartsOn);\n    tasks[i].recDef.setDateFmt(up.dateFormat);\n    parser.doParse(tasks[i].recPattern,tasks[i].recDef);\n    tasks_proc[i] \u003d {\n      id : tasks[i].id,\n      title: tasks[i].title,\n      notes: tasks[i].notes,\n      recPattern: null\n    }\n    \n    if (parser.err.code \u003d\u003d parser.PARSE_OK \u0026\u0026 tasks[i].recPattern){\n      tasks_proc[i].recPattern \u003d tasks[i].recPattern;\n      tasks_proc[i].recType \u003d tasks[i].recDef.recType;\n      tasks_proc[i].recFreq \u003d tasks[i].recDef.frequency;\n      tasks_proc[i].recW_dow \u003d tasks[i].recDef.weekly.days_of_week;\n      tasks_proc[i].recM_day \u003d tasks[i].recDef.monthly.day;\n      tasks_proc[i].recY_month \u003d tasks[i].recDef.yearly.month;\n      tasks_proc[i].recY_day \u003d tasks[i].recDef.yearly.day;\n      \n      // it is important to send date without timezone information so client can interpret it as its own timezone\n      tasks_proc[i].recStart \u003d tasks[i].recDef.recStart.date \u003e dateMin ? date2rfc3339(tasks[i].recDef.recStart.date, \u0027\u0027) : null;\n      tasks_proc[i].recEnd \u003d tasks[i].recDef.recEnd.date \u003c dateMax ? date2rfc3339(tasks[i].recDef.recEnd.date, \u0027\u0027) : null;\n    } else {\n      // logIt(LOG_DEV, \"Wrong recurrence pattern %s : %s\", tasks[i].title, tasks[i].notes);\n    }\n    \n  }\n  \n  return tasks_proc;\n\n}\n\n//---------------------------------------------------------------------------------\n\nfunction createTaskList(title) {\n  var taskList \u003d {title: title}; \n  return Tasks.Tasklists.insert(taskList);  \n}\n\n//---------------------------------------------------------------------------------\n\nfunction createTask(taskListId, t, n) {\n  var task \u003d { title: t, notes: n};  \n  return Tasks.Tasks.insert(task, taskListId); \n}\n\n//---------------------------------------------------------------------------------\n\nfunction deleteTask(taskListId, tid) {\n  logIt(LOG_EXTINFO, \"\u003e\u003e Deleting task %s\", tid);\n  try {\n    Tasks.Tasks.patch({deleted:true}, taskListId, tid);\n  } catch (e) {\n    logIt(LOG_CRITICAL, \"Internal Google Error occured: %s\", JSON.stringify(e));\n  }\n}\n\n//---------------------------------------------------------------------------------\n\nfunction updateRecTask(taskListId, t){\n  var userProps \u003d getUserProps();\n  \n  var r \u003d new Record_RGT();\n  r.locFmt.setWeekStart(userProps.weekStartsOn);\n  r.locFmt.setDateFmt(userProps.dateFormat);\n\n  r.recType \u003d t.recType;\n  r.frequency \u003d t.recFreq;\n  r.recStart.date \u003d ((t.recStart_ms) ? new Date(t.recStart_ms):null);\n  r.recEnd.date \u003d ((t.recEnd_ms) ? new Date(t.recEnd_ms):null);\n  r.weekly.days_of_week \u003d t.recW_dow;\n  r.monthly.day \u003d t.recM_day;\n  r.yearly.month \u003d t.recY_month;\n  r.yearly.day \u003d t.recY_day;\n  r.title \u003d t.title;\n  r.notes \u003d t.notes;\n  \n  var s \u003d r.toString();\n  s \u003d r.notes+(r.notes?\"\\n\":\"\")+s; //append recurrence pattern to the end of notes\n  \n  logIt(LOG_EXTINFO, \"\u003e\u003e Updating task %s\", t.id);\n  try {\n  Tasks.Tasks.patch({title:r.title, notes:s}, taskListId, t.id);\n  } catch (e) {\n    logIt(LOG_CRITICAL, \"Internal Google Error occured: %s\", JSON.stringify(e));\n  }\n\n}\n\n//---------------------------------------------------------------------------------\n\nfunction createExampleList(title) {\n  // read user preferecies for this user \u0026 script\n  var userProps \u003d getUserProps();\n  \n  var r \u003d new Record_RGT();\n  r.locFmt.setWeekStart(userProps.weekStartsOn);\n  r.locFmt.setDateFmt(userProps.dateFormat);\n  \n  var s; \n  \n  var d \u003d new Date();\n  var id \u003d createTaskList(userProps.recListPrefix+\" \"+title).getId();\n  \n  r.recType \u003d \"W\";\n  r.frequency \u003d 1;\n  r.weekly.days_of_week \u003d [false, true, false, false, true, false, false];\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;\n  s \u003d r.toString();\n  createTask(id, \"Buy milk\", \"Buy milk every week on Monday \u0026 Thursday\\n\"+s);\n\n  r.recType \u003d \"M\";\n  r.frequency \u003d 1;\n  r.monthly.day \u003d 20;\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;  \n  s \u003d r.toString();\n  createTask(id, \"Pay kindergarten\", \"Pay kindergarten every month on 20th\\n\"+s);\n\n  r.recType \u003d \"Y\";\n  r.frequency \u003d 1;\n  r.yearly.day \u003d 14;\n  r.yearly.month \u003d 3; //months are 0-11\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;  \n  s \u003d r.toString();\n  createTask(id, \"Pay taxes\", \"Every April 14th\\n\"+s);\n  \n  r.recType \u003d \"W\";\n  r.frequency \u003d 2;\n  r.weekly.days_of_week \u003d [false, false, false, false, false, false, true];\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;  \n  s \u003d r.toString();\n  createTask(id, \"Water plants\", \"Every second Saturday\\n\"+s);\n\n  r.recType \u003d \"D\";\n  r.frequency \u003d 5;\n  r.recStart.date \u003d new Date(d.getFullYear(),8,1); \n  r.recEnd.date \u003d new Date(d.getFullYear(),11,30); \n  s \u003d r.toString();\n  createTask(id, \"Do jogging\", \"Do it every 5th day during Sep-Dec\\n\"+s);\n  \n}\n\n//---------------------------------------------------------------------------------\n\nfunction slideTasks(tlid, d) {\n\n  var params\n  var tasks\n  var yd, ds\n  \n  logIt(LOG_INFO, \"Sliding past due tasks to date: %s\", d);\n\n  ds \u003d date2rfc3339(d);\n\n  // calculate last midnight\n  yd \u003d new Date(d.getTime());\n  yd.setDate(yd.getDate()-1);\n  yd.setHours(23, 59, 59, 999);\n  \n  // get list of non-completed tasks which were due before last midnight\n  logIt(LOG_DEV, \"\u003e\u003e Getting list of overdue tasks: %s\", yd);\n  params \u003d {showCompleted:false, dueMax:date2rfc3339(yd)};\n  tasks \u003d getTasks_paged(tlid,params);\n\n  for (var i\u003d0;i \u003c tasks.length;i++){\n    logIt(LOG_EXTINFO, \"\u003e\u003e Sliding %s from %s\", tasks[i].title, tasks[i].due);\n    Tasks.Tasks.patch({due:ds}, tlid, tasks[i].id);\n    Utilities.sleep(gTaskQTime); // artificial pause to manage API quota     \n  };\n\n  logIt(LOG_EXTINFO, \"\u003e\u003e Slid %s tasks\", i);\n\n}\n\n//-----------------------------------------------------------------------------------\n\nfunction removeDuplicateTasks(tlid, d){\n\n  var ds, td1, td2\n  var count \u003d 0;\n  \n  logIt(LOG_INFO, \"Removing duplicate tasks from date: %s\", d);\n\n  // beginning of the date\n  td1 \u003d new Date(d.getTime());\n  td1.setHours(0,0,0,000);\n  // end of date\n  td2 \u003d new Date(d.getTime());\n  td2.setHours(23,59,59,999);\n\n  // get the list of tasks for specified date\n  logIt(LOG_DEV, \"\u003e\u003e Getting list of tasks date: %s, %s\", td1, td2);\n  var params \u003d {showCompleted:true, dueMin:date2rfc3339(td1), dueMax:date2rfc3339(td2)};\n  var tasks \u003d getTasks_paged(tlid,params);\n    \n  // remove duplicates\n  for (var i\u003d0; i\u003ctasks.length; i++)\n    for (var j \u003d i+1; j\u003ctasks.length; j++){\n      // check if every task of today is different from the one currently being slid\n      if (tasks[i].title \u003d\u003d tasks[j].title) {\n        logIt(LOG_EXTINFO, \"\u003e\u003e Deleting duplicate %s from %s\", tasks[j].title, tasks[j].due);\n        Tasks.Tasks.patch({deleted:true}, tlid, tasks[j].id);\n        count++;\n        Utilities.sleep(gTaskQTime); // artificial pause to manage API quota\n\n      };\n    };\n\n  logIt(LOG_EXTINFO, \"\u003e\u003e Removed %s duplicate tasks\", count);\n\n\n}"},{"id":"a2da5a6f-ca07-43aa-8fc3-bedaa46ae4e0","name":"scripts-settings","type":"html","source":"\u003cscript\u003e\n\n// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction saveSettings() {\n  console.log(\"Going to save props: \"+JSON.stringify({\n       recListPrefix: $(\u0027#rttl-prefix\u0027).val(),\n       destTaskListId: $(\u0027#dest-tasklist\u0027).val(),\n       logVerboseLevel: $(\u0027#log-level\u0027).val(),\n       dateRangeLength: $(\u0027#dest-range\u0027).val(),\n       weekStartsOn: $(\u0027#weekStart\u0027).val(),\n       dateFormat:$(\u0027#dateFmt\u0027).val(),\n       ignoreDeleted:$(\u0027#ignoreDeleted\u0027).val(),\n       slideOverdue:$(\u0027#slideOverdue\u0027).val(),\n       userTMZ:$(\u0027#userTMZ\u0027).val(),\n       appendRecPattern:$(\u0027#appendRecPattern\u0027).val()\n    }));\n  google.script.run\n    .withSuccessHandler(\n      function() {  \n        $(\u0027#frmSaveStatus\u0027).text(\u0027Settings saved.\u0027);\n        $(\u0027#frmSaveStatus\u0027).css( \"display\", \"inline\" ).fadeOut( 2000 );\n        console.log(\"Settings saved.\");\n        reInstallTriggers($(\u0027#userTMZ\u0027).val());\n      }\n    )\n    .withFailureHandler(\n      function(error) { \n        console.log(error);\n        $(\u0027#frmSaveStatus\u0027).text(\u0027Save failed.\u0027);\n      }\n    ).setUserProps({\n       recListPrefix: $(\u0027#rttl-prefix\u0027).val(),\n       destTaskListId: $(\u0027#dest-tasklist\u0027).val(),\n       logVerboseLevel: $(\u0027#log-level\u0027).val(),\n       dateRangeLength: $(\u0027#dest-range\u0027).val(),\n       weekStartsOn: $(\u0027#weekStart\u0027).val(),\n       dateFormat:$(\u0027#dateFmt\u0027).val(),\n       ignoreDeleted:$(\u0027#ignoreDeleted\u0027).val(),\n       slideOverdue:$(\u0027#slideOverdue\u0027).val(),\n       userTMZ:$(\u0027#userTMZ\u0027).val(),\n       appendRecPattern:$(\u0027#appendRecPattern\u0027).val()\n    });\n}\n\nfunction loadSettings() {\n  google.script.run\n    .withSuccessHandler(\n      function(userProps) {\n        $(\u0027#rttl-prefix\u0027).val(userProps.recListPrefix);\n        $(\u0027#dest-tasklist\u0027).val(userProps.destTaskListId);\n        $(\u0027#log-level\u0027).val(userProps.logVerboseLevel);\n        $(\u0027#dest-range\u0027).val(userProps.dateRangeLength);\n        $(\u0027#weekStart\u0027).val(userProps.weekStartsOn);\n        $(\u0027#dateFmt\u0027).val(userProps.dateFormat);\n        $(\u0027#ignoreDeleted\u0027).val(userProps.ignoreDeleted);\n        $(\u0027#slideOverdue\u0027).val(userProps.slideOverdue);\n        $(\u0027#userTMZ\u0027).val(userProps.userTMZ);\n        $(\u0027#appendRecPattern\u0027).val(userProps.appendRecPattern);\n        console.log(\"Loaded props: \"+JSON.stringify(userProps));\n      }\n     )\n    .withFailureHandler(function(error){ console.log(error)} )\n    .getUserProps();\n}\n\n\n/**\n * Show the returned task lists in the dropdown box.\n * @param {Array.\u003cObject\u003e} taskLists The task lists to show.\n */\n  function showTaskLists_Settings(taskLists) {\n    var select \u003d $(\u0027#dest-tasklist\u0027);\n    select.empty();\n    taskLists.forEach(function(taskList) {\n      var option \u003d $(\u0027\u003coption\u003e\u0027)\n          .attr(\u0027value\u0027, taskList.id)\n          .text(taskList.name);\n      select.append(option);\n    });\n    loadSettings();\n    loadTaskLists(showRTTLcount);\n  }\n\nfunction showRTTLcount(tl) {\n  var prefix \u003d $(\u0027#rttl-prefix\u0027).val();\n  var count \u003d tl.filter(function(i){return 0 \u003d\u003d i.name.indexOf(prefix)}).length\n  $(\u0027#rttl-count\u0027).text(count);\n}\n\n\u003c/script\u003e\n"},{"id":"feb7d359-757b-4411-90af-6714824eec96","name":"scripts-main","type":"html","source":"\u003cscript\u003e\n\n// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//---------------------------------------------------------------------------------\n/**\n * Manully starts immediate processing of recurrent tasks\n */\nfunction runNow() {\n  console.log(\"Task processing started.\");\n  $(\u0027.btnRunNowStatus\u0027).text(\u0027Running...\u0027);\n  $(\u0027.btnRunNow\u0027).prop(\u0027disabled\u0027,true);\n  google.script.run\n      .withSuccessHandler(runNowDone)\n      .withFailureHandler(runNowError)\n      .processRecurrentLists();\n}\n\n//---------------------------------------------------------------------------------\nfunction runNowDone(res) {\n  $(\u0027.btnRunNowStatus\u0027).text(res||\u0027Finished.\u0027);\n  $(\u0027.btnRunNow\u0027).prop(\u0027disabled\u0027,false);\n  getRuntimeDetails();\n}\n\n//---------------------------------------------------------------------------------\n/**\n * Logs an error message and shows an alert to the user.\n */\nfunction runNowError(error) {\n  console.log(error);\n  $(\u0027.btnRunNowStatus\u0027).text(\u0027Finished with errors. See JavaScript console.\u0027);\n  $(\u0027.btnRunNow\u0027).prop(\u0027disabled\u0027,false);\n  getRuntimeDetails();\n}\n\n//---------------------------------------------------------------------------------\nfunction showLog() {\n  hideAllSections();\n  $(\u0027#sectionLogFile\u0027).show();\n  getLogFile();\n}\n\n//---------------------------------------------------------------------------------\nfunction getLogFile() {\n  $(\u0027#logfile\u0027).html(\u0027\u003cp\u003e... wait please... loading log file...\u003c/p\u003e\u0027);\n  google.script.run\n        .withSuccessHandler(function(t){$(\u0027#logfile\u0027).html(t);})\n        .withFailureHandler(function(t){$(\u0027#logfile\u0027).html(\u0027\u003cp\u003eError while loading a log file. Please, contact developer.\u003c/p\u003e\u0027);})\n        .getLog();\n}\n\n//---------------------------------------------------------------------------------\n/**\n * Installs time based Google Apps trigger, which will periodically process recurrent tasks\n */\nfunction installTriggers(tmz) {\n  if (!tmz) \n    tmz\u003d\"GMT\";\n  console.log(\"Installing triggers for TMZ\",tmz);\n  google.script.run\n      .withSuccessHandler(\n         function (){\n           console.log(\"Clock based trigger for recurrent tasks processing instaled.\");\n           checkTriggers();\n         }\n       )\n      .withFailureHandler(instTrigError)\n      .initTriggers(tmz);\n}\n\n//---------------------------------------------------------------------------------\nfunction instTrigError(error) {\n  console.log(error);\n  window.alert(\u0027An error has occurred while working with triggers, please try again.\u0027);\n}\n\n//---------------------------------------------------------------------------------\n\nfunction checkTriggers() {\n  google.script.run\n      .withSuccessHandler(function (e){\n           console.log(e,\"triggers are installed.\"); \n           if (e \u003d\u003d 0)\n             $(\u0027#noTrigger\u0027).show();\n           else \n             $(\u0027#noTrigger\u0027).hide();\n       })\n      .withFailureHandler(instTrigError)\n      .getTriggers();\n}\n\n//---------------------------------------------------------------------------------\n\nfunction uninstallTriggers() {\n  google.script.run\n      .withSuccessHandler(uninstMsg)\n      .withFailureHandler(instTrigError)\n      .removeAllTriggers();\n}\n\n//---------------------------------------------------------------------------------\nfunction reInstallTriggers(tmz){\n  google.script.run\n      .withSuccessHandler(\n          function(rmCount){\n              console.log(rmCount, \"triggers have been uninstalled\");\n              if (rmCount \u003e 0)\n                installTriggers(tmz);\n              else\n                console.log(-1,\"Triggers will not be re-installed as they haven\u0027t been installed before.\\nPerform manual installation from the Main page.\");\n          }\n       )\n      .withFailureHandler(instTrigError)\n      .removeAllTriggers();\n}\n\n//---------------------------------------------------------------------------------\nfunction uninstMsg(e) {\n  console.log(e,\"RecGTasks triggers have been uninstalled.\");\n  $(\u0027#frmUninstallStatus\u0027).text(\u0027Triggers (\u0027+e+\u0027) uninstalled.\u0027);\n  $(\u0027#frmUninstallStatus\u0027).css( \"display\", \"inline\" ).fadeOut( 2000 );\n  $(\u0027#noTrigger\u0027).show();\n}\n\n\n\n//---------------------------------------------------------------------------------\n/**\n * Get runtime details\n */\nfunction getRuntimeDetails() {\n  google.script.run.withSuccessHandler(showExecutionDetails)\n      .getTriggerDetails();\n\n}\n\n//---------------------------------------------------------------------------------\nfunction showExecutionDetails(a) {\n  var d \u003d new Date();\n  $(\u0027#execStarted\u0027).text(\u0027unknown\u0027);\n  $(\u0027#execFinished\u0027).text(\u0027unknown\u0027);\n  $(\u0027#btnShowLog\u0027).prop(\u0027disabled\u0027,true);\n  if (a[0]) {\n    $(\u0027#btnShowLog\u0027).prop(\u0027disabled\u0027,false);\n    d.setTime(parseInt(a[0]));\n    $(\u0027#execStarted\u0027).text(d);\n    d.setTime(parseInt(a[1]));\n    $(\u0027#execFinished\u0027).text(d);\n    \n  }\n}\n\n//---------------------------------------------------------------------------------\nfunction createExampleList() {\n  google.script.run\n      .withSuccessHandler(newListCreated)\n      .withFailureHandler(function (err){console.log(err);window.alert(\u0027ERROR creating example list.\u0027,i);})\n      .createExampleList(\"My repeating tasks\");\n  return false;\n}\n\n//---------------------------------------------------------------------------------\nfunction newListCreated(result){\n  window.alert(\u0027New Task List Created.\u0027);\n  loadTaskLists(showRTTLcount);\n  loadTaskLists(showTaskLists_Manage);\n  loadTaskLists(showTaskLists_Settings);\n}\n\n//---------------------------------------------------------------------------------\nfunction checkAuthorization() {\n  google.script.run\n      .withSuccessHandler(\n        function (e){\n          console.log(e?\"script is authorized\":\"script is NOT authorized\");\n          if (e){\n              $(\u0027#notAuthorized\u0027).hide();\n          } else { \n              $(\u0027#notAuthorized\u0027).show();\n          }\n        } \n      )\n      .withFailureHandler(function(e){console.log(e)})\n      .isScriptAuthorized();\n}\n\n//---------------------------------------------------------------------------------\nfunction getUserAccount() {\n  google.script.run\n      .withSuccessHandler(\n        function (e){\n          $(\u0027#usrAccnt\u0027).text(e.ua||\u0027*** unknown ***\u0027);\n        }\n      )\n      .withFailureHandler(function(e){console.log(e)})\n      .getUserDetails();\n\n}\n\n\n\n\u003c/script\u003e"},{"id":"6be36bc4-d1be-4fa7-975f-148d30a5f7ad","name":"scripts-gen-tasks","type":"html","source":"\u003cscript\u003e\n/**\n * Load the available task lists.\n */\nfunction loadTaskLists(h) {\n  google.script.run.withSuccessHandler(h)\n      .getTaskLists();\n}\n\n\u003c/script\u003e\n"},{"id":"13edb941-b6da-4f0d-b461-cc4c9be7ab2a","name":"Locale","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction LocaleFmt(){\n\n  // date formats:\n  // 1 - old: yearly MM/DD, start/end YYYY-MM-DD\n  // 2 - US: yearly MM/DD, start/end MM/DD/YYYYY\n  // 3 - UK: yearly DD/MM, start/end DD/MM/YYYYY\n\n  this.defFmtMonthDay \u003d [\n    [/^[0-9]{1,2}\\/[0-9]{1,2}$/, \"MMsDD\", \"/\"],\n    [/^[0-9]{1,2}\\/[0-9]{1,2}$/, \"MMsDD\", \"/\"],\n    [/^[0-9]{1,2}\\/[0-9]{1,2}$/, \"DDsMM\", \"/\"]\n   ];\n   \n  this.defFmtFullDate \u003d [\n    [/^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$/, \"YYYYsMMsDD\", \"-\"],\n    [/^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$/, \"MMsDDsYYYY\", \"/\"],\n    [/^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$/, \"DDsMMsYYYY\", \"/\"]\n  ];\n  \n  this.dateType \u003d 1;\n  \n  // let\u0027s assign some dummy values for properties\n  this.fmtFullDate \u003d \"?\";\n  this.sepFullDate \u003d \"?\";\n  this.sxFullDate \u003d /.*/;\n  \n  this.fmtMD \u003d \"?\";\n  this.sepMD \u003d \"?\";\n  this.sxMD \u003d /.*/;\n  \n  this.weekStartsOn \u003d \"S\"; //S \u003d Sunday, M \u003d Monday\n  \n  //correct initialization of properties\n  this.setDateFmt(\"1\"); \n}\n\nLocaleFmt.prototype.setWeekStart \u003d function(sd) {\n  switch (sd) {\n    case \"M\": this.weekStartsOn \u003d \"M\"; break;\n    default: this.weekStartsOn \u003d \"S\";\n  }\n}\n\nLocaleFmt.prototype.setDateFmt \u003d function(dtype) {\n  var dt \u003d parseInt(dtype);\n  if (!dt || dt \u003c 1 || dt \u003e this.defFmtFullDate.length) return;\n  \n  this.dateType \u003d dtype;\n  this.sxMD \u003d this.defFmtMonthDay[this.dateType-1][0];\n  this.sxFullDate \u003d this.defFmtFullDate[this.dateType-1][0];\n  this.sepFullDate \u003d this.defFmtFullDate[this.dateType-1][2];\n  this.sepMD \u003d this.defFmtMonthDay[this.dateType-1][2];\n  this.fmtMD \u003d this.defFmtMonthDay[this.dateType-1][1].replace(/s/g,this.sepMD);\n  this.fmtFullDate \u003d this.defFmtFullDate[this.dateType-1][1].replace(/s/g,this.sepFullDate);\n  \n}\n\nLocaleFmt.prototype.getFullDateStr \u003d function(dt) {\n  var y \u003d dt.getFullYear();\n  var m \u003d dt.getMonth()+1;\n  var d \u003d dt.getDate();\n  return this.fmtFullDate.replace(/YYYY/g,y).replace(/MM/g, m).replace(/DD/g, d);\n}\n\nLocaleFmt.prototype.getMDStr \u003d function(dt) {\n  return this.fmtMD.replace(/MM/g, dt.getMonth()+1).replace(/DD/g, dt.getDate());\n}\n\n"},{"id":"dded5a0b-5e05-48e8-9aaf-11d3ddb8ae0c","name":"Test","type":"server_js","source":"var TESTMODE \u003d 0; //DO NOT DELETE THIS LINE\n\nvar TEST_TL_PREFIX \u003d \"#!#TEST\";\n\nfunction runTest() {\n\n  TESTMODE \u003d 1;\n\n  var tlDESTtitle \u003d TEST_TL_PREFIX+\"-DEST\";\n  var tlRTTLtitle \u003d TEST_TL_PREFIX+\"-RTTL\";\n  var tlDEST, tlRTTL;\n  var prefix \u003d \"$R!\";\n  var dateStart \u003d new Date(2015,11,4,0,0,0); //start of testing period\n  var dateEnd \u003d new Date(dateStart.getTime()); //end of testing period\n  \n  \n\n  USEEXISTING \u003d 0;\n  \n  if (USEEXISTING \u003d\u003d 1) { //find task list #id using task list titles\n    tlRTTL \u003d getExistingList(tlRTTLtitle);\n    tlDEST \u003d getExistingList(tlDESTtitle);\n\n  } else {\n    // create test task list\n    tlDEST \u003d createTaskList(tlDESTtitle);\n    tlRTTL \u003d createTaskList(prefix+tlRTTLtitle);\n  }  \n  \n  // set testing override values for user properties\n  var up \u003d getUserProps();\n  up.recListPrefix \u003d prefix;\n  up.destTaskListId \u003d tlDEST.id;\n  up.logVerboseLevel \u003d \"10\";\n  up.dateRangeLength \u003d \"21\";\n  up.dateFormat \u003d \"2\"; // US date format MM/DD/YYYY\n  up.weekStartsOn \u003d \"S\";\n  \n  dateEnd.setDate(dateEnd.getDate()+parseInt(up.dateRangeLength));\n  \n  if (!USEEXISTING) {\n    // create generic test tasks\n    createTestTasks(up, tlRTTL.getId(), dateStart, dateEnd);\n    // create test tasks for issue #28\n    //createTestTasks_i28(up, tlRTTL.getId(), dateStart, dateEnd);\n    // create test tasks for issue #28\n    //createTestTasks_i29(up, tlRTTL.getId(), dateStart, dateEnd);\n    // create test tasks for issue #35\n    createTestTasks_i35(up, tlRTTL.getId(), dateStart, dateEnd);\n    \n  }    \n   \n  processRecurrentLists(\n    {userProps:up, \n    dateStart: dateStart, \n    dateEnd: dateEnd\n    });\n\n\n  var repeatProcessingCount \u003d 3; // repeat processing X times\n  var repeatProcessingSkipDays \u003d 3; // days to skip with each processing\n  var i \u003d 0;\n\n  for (i\u003d0;i\u003crepeatProcessingCount;i++){  \n    dateStart.setDate(dateStart.getDate()+repeatProcessingSkipDays);\n    dateEnd.setDate(dateEnd.getDate()+repeatProcessingSkipDays);\n    Utilities.sleep(2000); //because of requests/second quota\n    processRecurrentLists(\n      {userProps:up, \n      dateStart: dateStart, \n      dateEnd: dateEnd\n      });\n  };\n    \n  checkCreatedTestTasks(up, tlRTTL.id, dateStart, dateEnd);\n  \n  // remove test task lists\n\n  \n}\n\n// ********************************************************************\n\nfunction getExistingList(title){\n  var tl \u003d Tasks.Tasklists.list().getItems()\n  tl \u003d tl.filter(function(tl){return tl.title.indexOf(title) \u003e\u003d 0 });\n    \n  if (tl.length \u003e 0)\n    tl \u003d tl[0]\n  else\n    logIt(LOG_CRITICAL, \u0027There is no existing list %s\u0027,title);\n\n  return tl;\n\n}\n\n// ********************************************************************\nfunction createTestTasks_i28(userProps, dst, ds, de) {\n  // test tasks for issue #28\n\n  var r \u003d new Record_RGT();\n  r.locFmt.setWeekStart(userProps.weekStartsOn);\n  r.locFmt.setDateFmt(userProps.dateFormat);\n  \n  var t,n;\n\n  // *** MONTHLY every 3 month on 15th\n  r.recType \u003d \"M\";\n  r.frequency \u003d 3;\n  r.monthly.day \u003d 2;\n  r.recStart.date \u003d new Date(ds.getTime())\n  r.recEnd.date \u003d null; \n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#i18-01] \"+r.recType+(r.frequency|0)+\" 2\";\n  createTask(dst, t, n);\n\n  // *** WEEKLY every 2 month on Monday, Thursday\n  r.recType \u003d \"W\";\n  r.frequency \u003d 2;\n  r.weekly.days_of_week \u003d [false, true, false, false, true, false, false];\n  r.recStart.date \u003d new Date(ds.getTime())\n  r.recEnd.date \u003d null; \n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#i18-02] \"+r.recType+(r.frequency|0)+\" 2 on Mon/Thu\";\n  createTask(dst, t, n);\n\n\n}\n\n\n// ********************************************************************\nfunction createTestTasks_i29(userProps, dst, ds, de) {\n  // test tasks for issue #29 - leap year \n\n  var r \u003d new Record_RGT();\n  r.locFmt.setWeekStart(userProps.weekStartsOn);\n  r.locFmt.setDateFmt(userProps.dateFormat);\n  \n  var t,n;\n\n  // *** MONTHLY every 1 month on 29th\n  r.recType \u003d \"M\";\n  r.frequency \u003d 1;\n  r.monthly.day \u003d 29;\n  r.recStart.date \u003d new Date(ds.getTime())\n  r.recEnd.date \u003d null; \n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#i29-01] \"+r.recType+(r.frequency|0)+\" 2\";\n  createTask(dst, t, n);\n\n  // *** WEEKLY every week on Monday, Thursday, starting on Feb 29, 2016\n  r.recType \u003d \"W\";\n  r.frequency \u003d 1;\n  r.weekly.days_of_week \u003d [false, true, false, false, true, false, false];\n  r.recStart.date \u003d new Date(2016,1,29);  // February 29,2016 (which is a leap year)\n  r.recEnd.date \u003d new Date(2016,3,31);\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#i29-02] \"+r.recType+(r.frequency|0)+\" 1 on Mon/Thu\";\n  createTask(dst, t, n);\n\n\n}\n\n\n// ********************************************************************\nfunction createTestTasks_i35(userProps, dst, ds, de) {\n  // test tasks for issue #35 - bi-weekly task is repeated every week\n  // actually the issue was with calculating the start of recurrence for tasks having start date in the future\n  // following two tasks should repeat alternatively - never on the same day\n\n  var r \u003d new Record_RGT();\n  r.locFmt.setWeekStart(userProps.weekStartsOn);\n  r.locFmt.setDateFmt(userProps.dateFormat);\n  \n  var t,n;\n\n  // *** WEEKLY every second week on Wednesday starting on December 4, 2015\n  r.recType \u003d \"W\";\n  r.frequency \u003d 2;\n  r.weekly.days_of_week \u003d [false, false, false, true, false, false, false];\n  r.recStart.date \u003d new Date(2015,11,1);  // Dec 1, 2015\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#i35-01] \"+r.recType+(r.frequency|0)+\" 2 on Wed\";\n  createTask(dst, t, n);\n\n  // *** WEEKLY every second week on Wednesday starting on December 11, 2015\n  r.recType \u003d \"W\";\n  r.frequency \u003d 2;\n  r.weekly.days_of_week \u003d [false, false, false, true, false, false, false];\n  r.recStart.date \u003d new Date(2015,11,11);  // December 11, 2015\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#i35-02] \"+r.recType+(r.frequency|0)+\" 2 on Wed\";\n  createTask(dst, t, n);\n\n}\n\n// ********************************************************************\nfunction createTestTasks(userProps, dst, ds, de) {\n\n  var r \u003d new Record_RGT();\n  r.locFmt.setWeekStart(userProps.weekStartsOn);\n  r.locFmt.setDateFmt(userProps.dateFormat);\n  \n  var t,n;\n  var count \u003d 0;\n  \n  var d \u003d new Date();\n\n  // *** DAILY the first 40 days\n  r.recType \u003d \"D\";\n  r.frequency \u003d 1;\n  r.recStart.date \u003d new Date(ds.getTime());\n  r.recEnd.date \u003d new Date(r.recStart.date.getTime()+86399999); //23:59:59.999\n  r.recEnd.date.setDate(r.recEnd.date.getDate()+40-1);\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#01] \"+r.recType+(r.frequency|0)+\" 40 days\";\n  createTask(dst, t, n);\n  count +\u003d 40; //created 40 tasks\n  \n  // *** DAILY every 3 day the first 40 days\n  r.recType \u003d \"D\";\n  r.frequency \u003d 4;\n  r.recStart.date \u003d new Date(ds.getTime());\n  r.recEnd.date \u003d new Date(r.recStart.date.getTime()+86399999); \n  r.recEnd.date.setDate(r.recEnd.date.getDate()+40);\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#02] \"+r.recType+(r.frequency|0)+\" (40 days)\";\n  createTask(dst, t, n);\n  count +\u003d 10;\n\n  // *** WEEKLY every 1 week the first 40 days\n  r.recType \u003d \"W\";\n  r.frequency \u003d 1;\n  r.weekly.days_of_week \u003d [false, true, false, false, true, false, false];\n  r.recStart.date \u003d new Date(ds.getTime());\n  r.recEnd.date \u003d new Date(r.recStart.date.getTime()+86399999); \n  r.recEnd.date.setDate(r.recEnd.date.getDate()+40);\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#03] \"+r.recType+(r.frequency|0)+\" Mo,Th (40 days)\";\n  createTask(dst, t, n);\n  count +\u003d 10;\n  \n  // *** WEEKLY every 3 week whole period\n  r.recType \u003d \"W\";\n  r.frequency \u003d 3;\n  r.weekly.days_of_week \u003d [false, false, true, false, false, false, false];\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null; \n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#04] \"+r.recType+(r.frequency|0)+\" Tue (all)\";\n  createTask(dst, t, n);\n  count +\u003d 10;\n  \n\n  // *** MONTHLY every 1 month on 20th the first 100 days\n  r.recType \u003d \"M\";\n  r.frequency \u003d 1;\n  r.monthly.day \u003d 20;\n  r.recStart.date \u003d new Date(ds.getTime())\n  r.recEnd.date \u003d new Date(r.recStart.date.getTime()+86399999); \n  r.recEnd.date.setDate(r.recEnd.date.getDate()+100);\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#05] \"+r.recType+(r.frequency|0)+\" 20 (100 days)\";\n  createTask(dst, t, n);\n  count +\u003d 3;\n\n  // *** MONTHLY every 2 month on 31st whole period\n  r.recType \u003d \"M\";\n  r.frequency \u003d 2;\n  r.monthly.day \u003d 31; //this is going to test month alignment too \u003d\u003e 31 is the last day of a month, so in February it should create instance on 28th\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#06] \"+r.recType+(r.frequency|0)+\" 31 (all)\";\n  createTask(dst, t, n);\n  count +\u003d 3;\n\n  // *** YEARLY every JUN 20 whole period\n  r.recType \u003d \"Y\";\n  r.frequency \u003d 1;\n  r.yearly.day \u003d 20;\n  r.yearly.month \u003d 5; //months are 0-11\n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#07] \"+r.recType+(r.frequency|0)+\" June 20 (all)\";\n  createTask(dst, t, n);\n  count +\u003d 1;\n  \n  // *** MONTHLY every 1 month on 31 whole period\n  r.recType \u003d \"M\";\n  r.frequency \u003d 1;\n  r.monthly.day \u003d 8; \n  r.recStart.date \u003d null;\n  r.recEnd.date \u003d null;\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#08] \"+r.recType+(r.frequency|0)+\" 8 (all)\";\n  createTask(dst, t, n);\n  count +\u003d 3;\n  \n  // *** DAILY from the today+2 for 10 days\n  r.recType \u003d \"D\";\n  r.frequency \u003d 1;\n  r.recStart.date \u003d new Date();\n  r.recStart.date.setHours(0,0,0,0);\n  r.recStart.date.setDate(r.recStart.date.getDate()+2)\n  r.recEnd.date \u003d new Date(r.recStart.date.getTime()+86399999); //23:59:59.999\n  r.recEnd.date.setDate(r.recEnd.date.getDate()+10-1);\n  n \u003d r.toString()+\"\\nSecond line of notes\";\n  t \u003d \"[#09] \"+r.recType+(r.frequency|0)+\" 10 days\";\n  createTask(dst, t, n);\n  count +\u003d 10; //created 10 tasks\n  \n  \n\n}\n\n// ********************************************************************\nfunction cleanupTestTasks(userProperies) {\n\n  var tlTitle \u003d TEST_TL_PREFIX;\n\n  var tl \u003d getTaskLists();\n  for (var i\u003d0; i\u003ctl.length; i++){\n    if (tl[i].name.indexOf(tlTitle) \u003e\u003d 0) \n      Tasks.Tasklists.remove(tl[i].id);\n  }\n\n}\n\n// ********************************************************************\nfunction checkCreatedTestTasks(userProperies) {\n\n}\n\n// ********************************************************************\nfunction testSliding(){\n\n  var tl \u003d createTaskList(TEST_TL_PREFIX+\" sliding\");\n  var dt \u003d new Date();\n  dt.setHours(0,0,0,0);\n\n  // today task - should not slide\n  dt.setDate(dt.getDate());\n  Tasks.Tasks.insert({title:\"today task #0\",due:date2rfc3339(dt)}, tl.id); \n\n  // future task - should not slide\n  dt.setDate(dt.getDate()+1);\n  Tasks.Tasks.insert({title:\"sliding task #0\",due:date2rfc3339(dt)}, tl.id); \n\n  // past due task, not completed, but duplicate - should not slide\n  dt.setDate(dt.getDate()-7);\n  Tasks.Tasks.insert({title:\"today task #0\",notes:\"overdue duplicate\", due:date2rfc3339(dt)}, tl.id); \n\n  // past due task, not completed - should slide\n  dt.setDate(dt.getDate());\n  Tasks.Tasks.insert({title:\"sliding task #1\",due:date2rfc3339(dt)}, tl.id); \n  \n  // past due, completed - should NOT slide\n  dt.setDate(dt.getDate()+1);\n  Tasks.Tasks.insert({title:\"sliding task #2\",due:date2rfc3339(dt),completed:date2rfc3339(dt), status:\"completed\"}, tl.id); \n\n  // past due, deleted - should NOT slide\n  dt.setDate(dt.getDate()+1);\n  Tasks.Tasks.insert({title:\"sliding task #3\",due:date2rfc3339(dt),deleted:true}, tl.id); \n\n  // past due task, not completed - should slide\n  dt.setDate(dt.getDate()+1);\n  Tasks.Tasks.insert({title:\"sliding task #4\",due:date2rfc3339(dt)}, tl.id); \n\n  slideTasks(tl.id, new Date());\n  \n  removeDuplicateTasks(tl.id, new Date());\n  \n}\n\n// ********************************************************************\nfunction testProcessedTasks(){\n  var tl \u003d getExistingList(\"~R My repeating tasks\");\n  var tasks \u003d getProcessedTasks(tl.id);\n  \n  Logger.log(tasks);\n  \n}\n\n// ********************************************************************\nfunction testDate(){\n  Logger.log(new Date(\"Wed Jul 28 1993\"));\n\n}\n\n// ********************************************************************\n// testing compatibility issues with property values saved by older versions of script\nfunction testLoadProps(){\n  var p \u003d PropertiesService.getUserProperties();\n  var allOK \u003d true;\n  \n  // read user specific properties and initialize them if needed\n  var newp \u003d {\n    destTaskListId: p.getProperty(\"destTaskListId\"),\n    dateRangeLength: p.getProperty(\"dateRangeLength\"),\n    recListPrefix: p.getProperty(\"recListPrefix\"),\n    dateFormat: p.getProperty(\"dateFormat\"), \n    logVerboseLevel: p.getProperty(\"logVerboseLevel\"),\n    weekStartsOn: p.getProperty(\"weekStartsOn\"),\n    ignoreDeleted: p.getProperty(\"ignoreDeleted\"), \n    slideOverdue: p.getProperty(\"slideOverdue\") \n  };\n  \n  logIt(LOG_DEV, \"Props loaded %s\",JSON.stringify(newp));\n  \n  //-------------\n  \n  logIt(LOG_DEV, \"Setting test values\");\n  \n  newp.logVerboseLevel \u003d \"9\";\n  newp.dateFormat \u003d \"1.0\"\n  p.setProperties(newp, false); //then write them and keep all other properties (if any)\n  \n  //--------------\n  getUserProps();\n\n\n}\n\n//*********************************************************************\nfunction testTZconversion(){\n  var d \u003d new Date();\n  var tz \u003d \"Etc/GMT+12\";\n  //tz \u003d \"Pacific/Marquesas\";\n  //tz \u003d \"America/Los_Angeles\";\n  //tz \u003d \"Australia/Sydney\";\n  \n  throw (\"test exception\");\n  \n  try {\n    \n    \n    tz \u003d ctz;\n  } catch (e) {\n    Logger.log(e.message);\n    throw(\"defaulting to \"+tz);\n    \n  }\n  \n  var fd, fdG;\n  fdG \u003d Utilities.formatDate(d, \"GMT\", \"yyyy-MM-dd\u0027T\u002700:00:00.000\u0027Z\u0027\");\n  fd \u003d Utilities.formatDate(d, tz, \"yyyy-MM-dd\u0027T\u002700:00:00.000\u0027Z\u0027\");\n  var d \u003d new Date(fdG);\n  var d2 \u003d new Date(fd);\n  var l \u003d d2 \u003e\u003d d;\n  fd \u003d Utilities.formatDate(d, tz, \"yyyy-MM-dd\u0027T\u0027HH:mm:ssXXX\");\n  Logger.log(fd);\n  \n\n}\n\n\n\n\n"},{"id":"79e3f3d7-cd3c-4972-bdf0-33e6049047a7","name":"Misc","type":"server_js","source":"// Copyright (c) 2015-2016 Jozef Sovcik. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n//--------------------------------------------------\nfunction date2rfc3339(dt, tzo) {\n  // Google requires task due date in rfc3339 format, BUT ignores the time part of it,\n  // so it does shift tasks to another day in case of using toISOString() function\n  // 2008-11-13T00:00:00+01:00 \u003d\u003d 2008-11-12T23:00:00Z\n  \n  function pad(n){return n\u003c10 ? \u00270\u0027+n : n}\n  \n  if (tzo \u003d\u003d undefined)\n    tzo \u003d \"Z\"; //if not defined, then UTC \"Zulu\" time\n  \n  return dt.getFullYear()+\u0027-\u0027\n      + pad(dt.getMonth()+1)+\u0027-\u0027\n      + pad(dt.getDate())+\u0027T\u0027\n      + pad(dt.getHours())+\u0027:\u0027\n      + pad(dt.getMinutes())+\u0027:\u0027\n      + pad(dt.getSeconds())+\".000\"+tzo;  \n  \n}\n\n//--------------------------------------------------\nfunction tzOffsetString(dt) {\n  \n  function pad(n){return n\u003c10 ? \u00270\u0027+n : n}\n  \n  var h, m, n\n  \n  if (!dt)\n    dt \u003d new Date();\n    \n  h \u003d dt.getTimezoneOffset()/60;\n  n \u003d (h \u003e\u003d 0) ? \"-\" : \"+\";\n  h \u003d Math.floor(Math.abs(h));\n  m \u003d Math.abs(dt.getTimezoneOffset() % 60);\n  \n  return (n+pad(h)+\":\"+pad(m));\n}\n\n//----------------------------------------------------\n\nfunction isScriptAuthorized() {\n  var authInfo \u003d ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);\n  return (authInfo.getAuthorizationStatus() !\u003d ScriptApp.AuthorizationStatus.REQUIRED);\n}\n\n//----------------------------------------------------\n\nfunction leapYear(year) {\n  // returns true for leap year\n  return ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0);\n}\n\n//----------------------------------------------------\nfunction getUserDetails() {\n  return ({ua:Session.getActiveUser().getEmail()});\n}\n\n//----------------------------------------------------\nfunction safeReadTasklists(){\n  var retry\u003dtrue;\n  var retryCount\u003d10;\n  var result;\n  \n  while (retry \u0026\u0026 retryCount \u003e 0){\n    try {  \n      result \u003d Tasks.Tasklists.list();\n      retry\u003dfalse;\n    } catch (e) {\n      logIt(LOG_CRITICAL, \"Internal Google Error occured: %s\", JSON.stringify(e));\n      retryCount--;\n      Utilities.sleep(gTaskQTime); // artificial pause to manage API quota\n    }\n  }\n  \n  return result;\n\n}\n\n//----------------------------------------------------\nfunction safeTaskListRead(tlid,p){\n  var retry\u003dtrue;\n  var retryCount\u003d10;\n  var tasks;\n  \n  while (retry \u0026\u0026 retryCount \u003e 0){\n    try {  \n      tasks \u003d Tasks.Tasks.list(tlid, p);\n      retry\u003dfalse;\n    } catch (e) {\n      logIt(LOG_CRITICAL, \"Internal Google Error occured: %s\", JSON.stringify(e));\n      retryCount--;\n      Utilities.sleep(gTaskQTime); // artificial pause to manage API quota\n    }\n  }\n  \n  return tasks;\n\n}\n\n//----------------------------------------------------\nfunction safeTaskInsert(task, taskListId){\n  var retry\u003dtrue;\n  var retryCount\u003d10;\n  var result;\n\n  while (retry \u0026\u0026 retryCount \u003e 0) {\n    try {\n      result \u003d Tasks.Tasks.insert(task, taskListId);\n      retry \u003d false;\n    } catch(e) {\n      logIt(LOG_CRITICAL, \"Internal Google Error occured: %s\", JSON.stringify(e));\n      retryCount--;\n      Utilities.sleep(gTaskQTime); // artificial pause to manage API quota\n    }\n  }\n  \n  return result;\n\n}"},{"id":"fb5ff102-b658-4d8d-ae75-7a1ae8a3ed68","name":"scripts-common","type":"html","source":"\u003cscript\u003e\n\n//--------------------------------------------------\nfunction date2rfc3339(dt, tzo) {\n  // Google requires task due date in rfc3339 format, BUT ignores the time part of it,\n  // so it does shift tasks to another day in case of using toISOString() function\n  // 2008-11-13T00:00:00+01:00 \u003d\u003d 2008-11-12T23:00:00Z\n  \n  function pad(n){return n\u003c10 ? \u00270\u0027+n : n}\n  \n  if (tzo \u003d\u003d undefined)\n    tzo \u003d \"Z\"; //if not defined, then UTC \"Zulu\" time\n  \n  return dt.getFullYear()+\u0027-\u0027\n      + pad(dt.getMonth()+1)+\u0027-\u0027\n      + pad(dt.getDate())+\u0027T\u0027\n      + pad(dt.getHours())+\u0027:\u0027\n      + pad(dt.getMinutes())+\u0027:\u0027\n      + pad(dt.getSeconds())+\".000\"+tzo;  \n  \n}\n\n//--------------------------------------------------\nfunction tzOffsetString(dt) {\n  \n  function pad(n){return n\u003c10 ? \u00270\u0027+n : n}\n  \n  var h, m, n\n  \n  if (!dt)\n    dt \u003d new Date();\n    \n  h \u003d dt.getTimezoneOffset()/60;\n  n \u003d (h \u003e\u003d 0) ? \"-\":\"+\";\n  h \u003d Math.floor(Math.abs(h));\n  m \u003d Math.abs(dt.getTimezoneOffset() % 60);\n  \n  return (n+pad(h)+\":\"+pad(m));\n}\n\n\u003c/script\u003e"},{"id":"96d5239a-71d5-4089-87f2-8d4b339fcda2","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Etc/GMT\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [{\n      \"userSymbol\": \"Tasks\",\n      \"serviceId\": \"tasks\",\n      \"version\": \"v1\"\n    }]\n  },\n  \"webapp\": {\n    \"access\": \"ANYONE\",\n    \"executeAs\": \"USER_ACCESSING\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\"\n}"}]}